a:8:{s:5:"token";s:6:"2d34d3";s:6:"parent";N;s:8:"children";a:0:{}s:4:"data";a:11:{s:6:"config";C:62:"Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector":3070:{a:16:{s:8:"app_name";N;s:11:"app_version";N;s:5:"token";s:6:"2d34d3";s:15:"symfony_version";s:10:"2.3.40-DEV";s:4:"name";s:3:"app";s:3:"env";s:3:"dev";s:5:"debug";b:1;s:11:"php_version";s:5:"5.6.8";s:14:"xdebug_enabled";b:0;s:14:"eaccel_enabled";b:0;s:11:"apc_enabled";b:0;s:14:"xcache_enabled";b:0;s:16:"wincache_enabled";b:0;s:20:"zend_opcache_enabled";b:1;s:7:"bundles";a:25:{s:15:"FrameworkBundle";s:82:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\FrameworkBundle";s:14:"SecurityBundle";s:81:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\SecurityBundle";s:10:"TwigBundle";s:77:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\TwigBundle";s:13:"MonologBundle";s:83:"C:\xampp\htdocs\BecasMds\vendor\symfony\monolog-bundle\Symfony\Bundle\MonologBundle";s:17:"SwiftmailerBundle";s:58:"C:\xampp\htdocs\BecasMds\vendor\symfony\swiftmailer-bundle";s:13:"AsseticBundle";s:83:"C:\xampp\htdocs\BecasMds\vendor\symfony\assetic-bundle\Symfony\Bundle\AsseticBundle";s:14:"DoctrineBundle";s:56:"C:\xampp\htdocs\BecasMds\vendor\doctrine\doctrine-bundle";s:26:"SensioFrameworkExtraBundle";s:96:"C:\xampp\htdocs\BecasMds\vendor\sensio\framework-extra-bundle\Sensio\Bundle\FrameworkExtraBundle";s:21:"LexikFormFilterBundle";s:86:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle";s:30:"JordiLlonchCrudGeneratorBundle";s:97:"C:\xampp\htdocs\BecasMds\vendor\jordillonch\crud-generator\JordiLlonch\Bundle\CrudGeneratorBundle";s:13:"PersonaBundle";s:51:"C:\xampp\htdocs\BecasMds\src\BecasMds\PersonaBundle";s:15:"FormacionBundle";s:53:"C:\xampp\htdocs\BecasMds\src\BecasMds\FormacionBundle";s:10:"BecaBundle";s:48:"C:\xampp\htdocs\BecasMds\src\BecasMds\BecaBundle";s:19:"CertificacionBundle";s:57:"C:\xampp\htdocs\BecasMds\src\BecasMds\CertificacionBundle";s:16:"GenemuFormBundle";s:75:"C:\xampp\htdocs\BecasMds\vendor\genemu\form-bundle\Genemu\Bundle\FormBundle";s:27:"AntQaAjaxAutoCompleteBundle";s:69:"C:\xampp\htdocs\BecasMds\vendor\piotrantosik\ajax-autocomplete-bundle";s:18:"FOSJsRoutingBundle";s:65:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\jsrouting-bundle";s:23:"WhiteOctoberTCPDFBundle";s:82:"C:\xampp\htdocs\BecasMds\vendor\whiteoctober\tcpdf-bundle\WhiteOctober\TCPDFBundle";s:18:"ShtumiUsefulBundle";s:72:"C:\xampp\htdocs\BecasMds\vendor\shtumi\useful-bundle\Shtumi\UsefulBundle";s:18:"LiuggioExcelBundle";s:71:"C:\xampp\htdocs\BecasMds\vendor\liuggio\ExcelBundle\Liuggio\ExcelBundle";s:13:"FOSUserBundle";s:60:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle";s:13:"UsuarioBundle";s:51:"C:\xampp\htdocs\BecasMds\src\BecasMds\UsuarioBundle";s:17:"WebProfilerBundle";s:84:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\WebProfilerBundle";s:24:"SensioDistributionBundle";s:91:"C:\xampp\htdocs\BecasMds\vendor\sensio\distribution-bundle\Sensio\Bundle\DistributionBundle";s:21:"SensioGeneratorBundle";s:85:"C:\xampp\htdocs\BecasMds\vendor\sensio\generator-bundle\Sensio\Bundle\GeneratorBundle";}s:9:"sapi_name";s:14:"apache2handler";}}s:7:"request";C:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector":7993:{a:18:{s:6:"format";s:4:"html";s:7:"content";s:59:"parent_id=1279&entity_alias=calle_by_localidad&empty_value=";s:12:"content_type";s:24:"text/html; charset=UTF-8";s:11:"status_text";s:21:"Internal Server Error";s:11:"status_code";i:500;s:13:"request_query";a:0:{}s:15:"request_request";a:3:{s:9:"parent_id";s:4:"1279";s:12:"entity_alias";s:18:"calle_by_localidad";s:11:"empty_value";s:0:"";}s:15:"request_headers";a:14:{s:4:"host";a:1:{i:0;s:24:"becasmds.chaco.gov.ar:86";}s:10:"connection";a:1:{i:0;s:10:"keep-alive";}s:14:"content-length";a:1:{i:0;s:2:"59";}s:13:"cache-control";a:1:{i:0;s:9:"max-age=0";}s:6:"accept";a:1:{i:0;s:3:"*/*";}s:6:"origin";a:1:{i:0;s:31:"http://becasmds.chaco.gov.ar:86";}s:16:"x-requested-with";a:1:{i:0;s:14:"XMLHttpRequest";}s:10:"user-agent";a:1:{i:0;s:109:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36";}s:12:"content-type";a:1:{i:0;s:48:"application/x-www-form-urlencoded; charset=UTF-8";}s:7:"referer";a:1:{i:0;s:58:"http://becasmds.chaco.gov.ar:86/app_dev.php/becado/27/edit";}s:15:"accept-encoding";a:1:{i:0;s:13:"gzip, deflate";}s:15:"accept-language";a:1:{i:0;s:14:"es-ES,es;q=0.8";}s:6:"cookie";a:1:{i:0;s:36:"PHPSESSID=b8f9r94bjbvcfs39s6c5cl35a1";}s:14:"x-php-ob-level";a:1:{i:0;i:1;}}s:14:"request_server";a:48:{s:7:"MIBDIRS";s:24:"C:/xampp/php/extras/mibs";s:10:"MYSQL_HOME";s:16:"\xampp\mysql\bin";s:12:"OPENSSL_CONF";s:31:"C:/xampp/apache/bin/openssl.cnf";s:20:"PHP_PEAR_SYSCONF_DIR";s:10:"\xampp\php";s:5:"PHPRC";s:10:"\xampp\php";s:3:"TMP";s:10:"\xampp\tmp";s:9:"HTTP_HOST";s:24:"becasmds.chaco.gov.ar:86";s:15:"HTTP_CONNECTION";s:10:"keep-alive";s:14:"CONTENT_LENGTH";s:2:"59";s:18:"HTTP_CACHE_CONTROL";s:9:"max-age=0";s:11:"HTTP_ACCEPT";s:3:"*/*";s:11:"HTTP_ORIGIN";s:31:"http://becasmds.chaco.gov.ar:86";s:21:"HTTP_X_REQUESTED_WITH";s:14:"XMLHttpRequest";s:15:"HTTP_USER_AGENT";s:109:"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36";s:12:"CONTENT_TYPE";s:48:"application/x-www-form-urlencoded; charset=UTF-8";s:12:"HTTP_REFERER";s:58:"http://becasmds.chaco.gov.ar:86/app_dev.php/becado/27/edit";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"es-ES,es;q=0.8";s:11:"HTTP_COOKIE";s:36:"PHPSESSID=b8f9r94bjbvcfs39s6c5cl35a1";s:4:"PATH";s:808:"C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\EgisTec MyWinLocker\x86;C:\Program Files (x86)\EgisTec MyWinLocker\x64;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files (x86)\Windows Live\Shared;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\;c:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\VSShell\Common7\IDE\;c:\Program Files (x86)\Microsoft SQL Server\100\DTS\Binn\;C:\xampp\php;C:\ProgramData\ComposerSetup\bin;C:\Program Files (x86)\Skype\Phone\";s:10:"SystemRoot";s:10:"C:\Windows";s:7:"COMSPEC";s:27:"C:\Windows\system32\cmd.exe";s:7:"PATHEXT";s:53:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC";s:6:"WINDIR";s:10:"C:\Windows";s:16:"SERVER_SIGNATURE";s:106:"<address>Apache/2.4.12 (Win32) OpenSSL/1.0.1l PHP/5.6.8 Server at becasmds.chaco.gov.ar Port 86</address>
";s:15:"SERVER_SOFTWARE";s:46:"Apache/2.4.12 (Win32) OpenSSL/1.0.1l PHP/5.6.8";s:11:"SERVER_NAME";s:21:"becasmds.chaco.gov.ar";s:11:"SERVER_ADDR";s:9:"127.0.0.1";s:11:"SERVER_PORT";s:2:"86";s:11:"REMOTE_ADDR";s:9:"127.0.0.1";s:13:"DOCUMENT_ROOT";s:28:"C:/xampp/htdocs/BecasMds/web";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:28:"C:/xampp/htdocs/BecasMds/web";s:12:"SERVER_ADMIN";s:21:"becasmds.chaco.gov.ar";s:15:"SCRIPT_FILENAME";s:40:"C:/xampp/htdocs/BecasMds/web/app_dev.php";s:11:"REMOTE_PORT";s:5:"56722";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"REQUEST_URI";s:45:"/app_dev.php/shtumi_dependent_filtered_entity";s:11:"SCRIPT_NAME";s:12:"/app_dev.php";s:9:"PATH_INFO";s:33:"/shtumi_dependent_filtered_entity";s:15:"PATH_TRANSLATED";s:17:"redirect:\app.php";s:8:"PHP_SELF";s:45:"/app_dev.php/shtumi_dependent_filtered_entity";s:18:"REQUEST_TIME_FLOAT";d:1463390056.217999935150146484375;s:12:"REQUEST_TIME";i:1463390056;}s:15:"request_cookies";a:1:{s:9:"PHPSESSID";s:26:"b8f9r94bjbvcfs39s6c5cl35a1";}s:18:"request_attributes";a:0:{}s:16:"response_headers";a:5:{s:13:"cache-control";a:1:{i:0;s:8:"no-cache";}s:4:"date";a:1:{i:0;s:29:"Mon, 16 May 2016 09:14:20 GMT";}s:13:"x-debug-token";a:1:{i:0;s:6:"2d34d3";}s:19:"x-chromelogger-data";a:1:{i:0;s:2836:"eyJ2ZXJzaW9uIjoiNC4wIiwiY29sdW1ucyI6WyJsYWJlbCIsImxvZyIsImJhY2t0cmFjZSIsInR5cGUiXSwicm93cyI6W1sicmVxdWVzdCIseyJtZXNzYWdlIjoiVW5jYXVnaHQgUEhQIEV4Y2VwdGlvbiBTeW1mb255XFxDb21wb25lbnRcXEZpbGVzeXN0ZW1cXEV4Y2VwdGlvblxcSU9FeGNlcHRpb246IFwiQ2Fubm90IHJlbmFtZSBcIkM6XFx4YW1wcFxcaHRkb2NzXFxCZWNhc01kc1xcYXBwXFxjYWNoZVxcZGV2XFxhcHA5RUMyLnRtcFwiIHRvIFwiQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFxhcHBcXGNhY2hlXFxkZXZcL2FwcERldlVybE1hdGNoZXIucGhwXCIuXCIgYXQgQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFx2ZW5kb3JcXHN5bWZvbnlcXHN5bWZvbnlcXHNyY1xcU3ltZm9ueVxcQ29tcG9uZW50XFxGaWxlc3lzdGVtXFxGaWxlc3lzdGVtLnBocCBsaW5lIDI2NCIsImNvbnRleHQiOnsiZXhjZXB0aW9uIjp7fX19LCJ1bmtub3duIiwiZXJyb3IiXSxbImRlcHJlY2F0aW9uIix7Im1lc3NhZ2UiOiJEZWZpbmluZyB0aGUgZ2V0R2xvYmFscygpIG1ldGhvZCBpbiB0aGUgXCJhc3NldGljXCIgZXh0ZW5zaW9uIHdpdGhvdXQgZXhwbGljaXRseSBpbXBsZW1lbnRpbmcgVHdpZ19FeHRlbnNpb25fR2xvYmFsc0ludGVyZmFjZSBpcyBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4yMy4iLCJjb250ZXh0Ijp7InR5cGUiOi0xMDAsInN0YWNrIjpbeyJmdW5jdGlvbiI6ImhhbmRsZSIsImNsYXNzIjoiU3ltZm9ueVxcQ29tcG9uZW50XFxEZWJ1Z1xcRXJyb3JIYW5kbGVyIiwidHlwZSI6Ii0+In0seyJmaWxlIjoiQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFxhcHBcXGNhY2hlXFxkZXZcXGNsYXNzZXMucGhwIiwibGluZSI6MzQxMywiZnVuY3Rpb24iOiJ0cmlnZ2VyX2Vycm9yIn0seyJmaWxlIjoiQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFxhcHBcXGNhY2hlXFxkZXZcXGNsYXNzZXMucGhwIiwibGluZSI6MzM3NCwiZnVuY3Rpb24iOiJpbml0R2xvYmFscyIsImNsYXNzIjoiVHdpZ19FbnZpcm9ubWVudCIsInR5cGUiOiItPiJ9LHsiZmlsZSI6IkM6XFx4YW1wcFxcaHRkb2NzXFxCZWNhc01kc1xcYXBwXFxjYWNoZVxcZGV2XFxjbGFzc2VzLnBocCIsImxpbmUiOjMzODAsImZ1bmN0aW9uIjoiZ2V0R2xvYmFscyIsImNsYXNzIjoiVHdpZ19FbnZpcm9ubWVudCIsInR5cGUiOiItPiJ9LHsiZmlsZSI6IkM6XFx4YW1wcFxcaHRkb2NzXFxCZWNhc01kc1xcYXBwXFxjYWNoZVxcZGV2XFxjbGFzc2VzLnBocCIsImxpbmUiOjQ2MjksImZ1bmN0aW9uIjoibWVyZ2VHbG9iYWxzIiwiY2xhc3MiOiJUd2lnX0Vudmlyb25tZW50IiwidHlwZSI6Ii0+In0seyJmaWxlIjoiQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFxhcHBcXGNhY2hlXFxkZXZcXGNsYXNzZXMucGhwIiwibGluZSI6NDYzNiwiZnVuY3Rpb24iOiJkaXNwbGF5IiwiY2xhc3MiOiJUd2lnX1RlbXBsYXRlIiwidHlwZSI6Ii0+In0seyJmaWxlIjoiQzpcXHhhbXBwXFxodGRvY3NcXEJlY2FzTWRzXFxhcHBcXGNhY2hlXFxkZXZcXGNsYXNzZXMucGhwIiwibGluZSI6Mjk0NCwiZnVuY3Rpb24iOiJyZW5kZXIiLCJjbGFzcyI6IlR3aWdfVGVtcGxhdGUiLCJ0eXBlIjoiLT4ifSx7ImZpbGUiOiJDOlxceGFtcHBcXGh0ZG9jc1xcQmVjYXNNZHNcXHZlbmRvclxcc3ltZm9ueVxcc3ltZm9ueVxcc3JjXFxTeW1mb255XFxCdW5kbGVcXFR3aWdCdW5kbGVcXENvbnRyb2xsZXJcXEV4Y2VwdGlvbkNvbnRyb2xsZXIucGhwIiwibGluZSI6NjMsImZ1bmN0aW9uIjoicmVuZGVyIiwiY2xhc3MiOiJUd2lnX0Vudmlyb25tZW50IiwidHlwZSI6Ii0+In0seyJmdW5jdGlvbiI6InNob3dBY3Rpb24iLCJjbGFzcyI6IlN5bWZvbnlcXEJ1bmRsZVxcVHdpZ0J1bmRsZVxcQ29udHJvbGxlclxcRXhjZXB0aW9uQ29udHJvbGxlciIsInR5cGUiOiItPiJ9LHsiZmlsZSI6IkM6XFx4YW1wcFxcaHRkb2NzXFxCZWNhc01kc1xcYXBwXFxib290c3RyYXAucGhwLmNhY2hlIiwibGluZSI6Mjk3NCwiZnVuY3Rpb24iOiJjYWxsX3VzZXJfZnVuY19hcnJheSJ9XX19LCJ1bmtub3duIiwid2FybiJdXSwicmVxdWVzdF91cmkiOiJcL2FwcF9kZXYucGhwXC9zaHR1bWlfZGVwZW5kZW50X2ZpbHRlcmVkX2VudGl0eSJ9";}s:12:"content-type";a:1:{i:0;s:24:"text/html; charset=UTF-8";}}s:16:"session_metadata";a:0:{}s:18:"session_attributes";a:0:{}s:7:"flashes";a:0:{}s:9:"path_info";s:33:"/shtumi_dependent_filtered_entity";s:10:"controller";s:3:"n/a";s:6:"locale";s:2:"en";}}s:9:"exception";C:65:"Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector":276001:{a:1:{s:9:"exception";O:50:"Symfony\Component\Debug\Exception\FlattenException":10:{s:59:" Symfony\Component\Debug\Exception\FlattenException message";s:132:"Cannot rename "C:\xampp\htdocs\BecasMds\app\cache\dev\app9EC2.tmp" to "C:\xampp\htdocs\BecasMds\app\cache\dev/appDevUrlMatcher.php".";s:56:" Symfony\Component\Debug\Exception\FlattenException code";i:0;s:60:" Symfony\Component\Debug\Exception\FlattenException previous";N;s:57:" Symfony\Component\Debug\Exception\FlattenException trace";a:17:{i:0;a:8:{s:9:"namespace";s:0:"";s:11:"short_class";s:0:"";s:5:"class";s:0:"";s:4:"type";s:0:"";s:8:"function";s:0:"";s:4:"file";s:95:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\Filesystem\Filesystem.php";s:4:"line";i:264;s:4:"args";a:0:{}}i:1;a:8:{s:9:"namespace";s:28:"Symfony\Component\Filesystem";s:11:"short_class";s:10:"Filesystem";s:5:"class";s:39:"Symfony\Component\Filesystem\Filesystem";s:4:"type";s:2:"->";s:8:"function";s:6:"rename";s:4:"file";s:95:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\Filesystem\Filesystem.php";s:4:"line";i:507;s:4:"args";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\app9EC2.tmp";}i:1;a:2:{i:0;s:6:"string";i:1;s:59:"C:\xampp\htdocs\BecasMds\app\cache\dev/appDevUrlMatcher.php";}i:2;a:2:{i:0;s:7:"boolean";i:1;b:1;}}}i:2;a:8:{s:9:"namespace";s:28:"Symfony\Component\Filesystem";s:11:"short_class";s:10:"Filesystem";s:5:"class";s:39:"Symfony\Component\Filesystem\Filesystem";s:4:"type";s:2:"->";s:8:"function";s:8:"dumpFile";s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:2903;s:4:"args";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:59:"C:\xampp\htdocs\BecasMds\app\cache\dev/appDevUrlMatcher.php";}i:1;a:2:{i:0;s:6:"string";i:1;s:124262:"<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appDevUrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);

        if (0 === strpos($pathinfo, '/fonts/glyphicons-halflings')) {
            // _assetic_font_awesome_ttf
            if ($pathinfo === '/fonts/glyphicons-halflings.ttf') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'font_awesome_ttf',  'pos' => NULL,  '_format' => 'ttf',  '_route' => '_assetic_font_awesome_ttf',);
            }

            // _assetic_font_awesome_ttf_0
            if ($pathinfo === '/fonts/glyphicons-halflings_glyphicons-halflings_1.ttf') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'font_awesome_ttf',  'pos' => 0,  '_format' => 'ttf',  '_route' => '_assetic_font_awesome_ttf_0',);
            }

        }

        if (0 === strpos($pathinfo, '/images/logoDesarrolloSocial-medium')) {
            // _assetic_images_login
            if ($pathinfo === '/images/logoDesarrolloSocial-medium.jpg') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'images_login',  'pos' => NULL,  '_format' => 'jpg',  '_route' => '_assetic_images_login',);
            }

            // _assetic_images_login_0
            if ($pathinfo === '/images/logoDesarrolloSocial-medium_logoDesarrolloSocial-medium_1.jpg') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'images_login',  'pos' => 0,  '_format' => 'jpg',  '_route' => '_assetic_images_login_0',);
            }

        }

        if (0 === strpos($pathinfo, '/js')) {
            // _assetic_persona_jquery_ui
            if ($pathinfo === '/js/jquery.ui.js') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'persona_jquery_ui',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_persona_jquery_ui',);
            }

            if (0 === strpos($pathinfo, '/js/c2447d5')) {
                // _assetic_c2447d5
                if ($pathinfo === '/js/c2447d5.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_c2447d5',);
                }

                if (0 === strpos($pathinfo, '/js/c2447d5_')) {
                    // _assetic_c2447d5_0
                    if ($pathinfo === '/js/c2447d5_jquery-ui_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_c2447d5_0',);
                    }

                    if (0 === strpos($pathinfo, '/js/c2447d5_a')) {
                        if (0 === strpos($pathinfo, '/js/c2447d5_agregar')) {
                            // _assetic_c2447d5_1
                            if ($pathinfo === '/js/c2447d5_agregarDomicilio_2.js') {
                                return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_c2447d5_1',);
                            }

                            // _assetic_c2447d5_2
                            if ($pathinfo === '/js/c2447d5_agregarFormacion_3.js') {
                                return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 2,  '_format' => 'js',  '_route' => '_assetic_c2447d5_2',);
                            }

                        }

                        // _assetic_c2447d5_3
                        if ($pathinfo === '/js/c2447d5_addForm_4.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 3,  '_format' => 'js',  '_route' => '_assetic_c2447d5_3',);
                        }

                    }

                    // _assetic_c2447d5_4
                    if ($pathinfo === '/js/c2447d5_deleteRow_5.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 4,  '_format' => 'js',  '_route' => '_assetic_c2447d5_4',);
                    }

                    if (0 === strpos($pathinfo, '/js/c2447d5_select2')) {
                        // _assetic_c2447d5_5
                        if ($pathinfo === '/js/c2447d5_select2_6.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 5,  '_format' => 'js',  '_route' => '_assetic_c2447d5_5',);
                        }

                        // _assetic_c2447d5_6
                        if ($pathinfo === '/js/c2447d5_select2Becado_7.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 6,  '_format' => 'js',  '_route' => '_assetic_c2447d5_6',);
                        }

                    }

                    // _assetic_c2447d5_7
                    if ($pathinfo === '/js/c2447d5_dalert.jquery.min_8.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 7,  '_format' => 'js',  '_route' => '_assetic_c2447d5_7',);
                    }

                    // _assetic_c2447d5_8
                    if ($pathinfo === '/js/c2447d5_ajax-functions_9.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 8,  '_format' => 'js',  '_route' => '_assetic_c2447d5_8',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/e7e8cb1')) {
                // _assetic_e7e8cb1
                if ($pathinfo === '/js/e7e8cb1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e7e8cb1',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_e7e8cb1',);
                }

                // _assetic_e7e8cb1_0
                if ($pathinfo === '/js/e7e8cb1_part_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e7e8cb1',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_e7e8cb1_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/3cf3039')) {
                // _assetic_3cf3039
                if ($pathinfo === '/js/3cf3039.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '3cf3039',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_3cf3039',);
                }

                // _assetic_3cf3039_0
                if ($pathinfo === '/js/3cf3039_select2_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '3cf3039',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_3cf3039_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/c09786c')) {
                // _assetic_c09786c
                if ($pathinfo === '/js/c09786c.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_c09786c',);
                }

                if (0 === strpos($pathinfo, '/js/c09786c_select2')) {
                    // _assetic_c09786c_0
                    if ($pathinfo === '/js/c09786c_select2_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_c09786c_0',);
                    }

                    // _assetic_c09786c_1
                    if ($pathinfo === '/js/c09786c_select2Becado_2.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_c09786c_1',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/84b4787')) {
                // _assetic_84b4787
                if ($pathinfo === '/js/84b4787.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_84b4787',);
                }

                if (0 === strpos($pathinfo, '/js/84b4787_select2')) {
                    // _assetic_84b4787_0
                    if ($pathinfo === '/js/84b4787_select2_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_84b4787_0',);
                    }

                    // _assetic_84b4787_1
                    if ($pathinfo === '/js/84b4787_select2Formacion_2.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_84b4787_1',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/e604a14')) {
                // _assetic_e604a14
                if ($pathinfo === '/js/e604a14.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_e604a14',);
                }

                if (0 === strpos($pathinfo, '/js/e604a14_')) {
                    // _assetic_e604a14_0
                    if ($pathinfo === '/js/e604a14_jquery-1.9.0_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_e604a14_0',);
                    }

                    if (0 === strpos($pathinfo, '/js/e604a14_select2')) {
                        // _assetic_e604a14_1
                        if ($pathinfo === '/js/e604a14_select2_2.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_e604a14_1',);
                        }

                        // _assetic_e604a14_2
                        if ($pathinfo === '/js/e604a14_select2Becado_3.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 2,  '_format' => 'js',  '_route' => '_assetic_e604a14_2',);
                        }

                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/0d77cf1')) {
                // _assetic_0d77cf1
                if ($pathinfo === '/js/0d77cf1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '0d77cf1',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_0d77cf1',);
                }

                // _assetic_0d77cf1_0
                if ($pathinfo === '/js/0d77cf1_part_1_funcionescertificacionbundle_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '0d77cf1',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_0d77cf1_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/3')) {
                if (0 === strpos($pathinfo, '/js/3aa7f8d')) {
                    // _assetic_3aa7f8d
                    if ($pathinfo === '/js/3aa7f8d.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '3aa7f8d',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_3aa7f8d',);
                    }

                    // _assetic_3aa7f8d_0
                    if ($pathinfo === '/js/3aa7f8d_jquery-1.9.0_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '3aa7f8d',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_3aa7f8d_0',);
                    }

                }

                if (0 === strpos($pathinfo, '/js/30d8e69')) {
                    // _assetic_30d8e69
                    if ($pathinfo === '/js/30d8e69.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_30d8e69',);
                    }

                    if (0 === strpos($pathinfo, '/js/30d8e69_')) {
                        // _assetic_30d8e69_0
                        if ($pathinfo === '/js/30d8e69_jquery-1.9.0_1.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_30d8e69_0',);
                        }

                        // _assetic_30d8e69_1
                        if ($pathinfo === '/js/30d8e69_select2_2.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_30d8e69_1',);
                        }

                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/_')) {
            // _wdt
            if (0 === strpos($pathinfo, '/_wdt') && preg_match('#^/_wdt/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => '_wdt')), array (  '_controller' => 'web_profiler.controller.profiler:toolbarAction',));
            }

            if (0 === strpos($pathinfo, '/_profiler')) {
                // _profiler_home
                if (rtrim($pathinfo, '/') === '/_profiler') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_profiler_home');
                    }

                    return array (  '_controller' => 'web_profiler.controller.profiler:homeAction',  '_route' => '_profiler_home',);
                }

                if (0 === strpos($pathinfo, '/_profiler/search')) {
                    // _profiler_search
                    if ($pathinfo === '/_profiler/search') {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchAction',  '_route' => '_profiler_search',);
                    }

                    // _profiler_search_bar
                    if ($pathinfo === '/_profiler/search_bar') {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchBarAction',  '_route' => '_profiler_search_bar',);
                    }

                }

                // _profiler_purge
                if ($pathinfo === '/_profiler/purge') {
                    return array (  '_controller' => 'web_profiler.controller.profiler:purgeAction',  '_route' => '_profiler_purge',);
                }

                // _profiler_info
                if (0 === strpos($pathinfo, '/_profiler/info') && preg_match('#^/_profiler/info/(?P<about>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_info')), array (  '_controller' => 'web_profiler.controller.profiler:infoAction',));
                }

                // _profiler_phpinfo
                if ($pathinfo === '/_profiler/phpinfo') {
                    return array (  '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  '_route' => '_profiler_phpinfo',);
                }

                // _profiler_search_results
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/search/results$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_search_results')), array (  '_controller' => 'web_profiler.controller.profiler:searchResultsAction',));
                }

                // _profiler
                if (preg_match('#^/_profiler/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler')), array (  '_controller' => 'web_profiler.controller.profiler:panelAction',));
                }

                // _profiler_router
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/router$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_router')), array (  '_controller' => 'web_profiler.controller.router:panelAction',));
                }

                // _profiler_exception
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception')), array (  '_controller' => 'web_profiler.controller.exception:showAction',));
                }

                // _profiler_exception_css
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception\\.css$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception_css')), array (  '_controller' => 'web_profiler.controller.exception:cssAction',));
                }

            }

            if (0 === strpos($pathinfo, '/_configurator')) {
                // _configurator_home
                if (rtrim($pathinfo, '/') === '/_configurator') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_configurator_home');
                    }

                    return array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  '_route' => '_configurator_home',);
                }

                // _configurator_step
                if (0 === strpos($pathinfo, '/_configurator/step') && preg_match('#^/_configurator/step/(?P<index>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_configurator_step')), array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',));
                }

                // _configurator_final
                if ($pathinfo === '/_configurator/final') {
                    return array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  '_route' => '_configurator_final',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/user')) {
            // user
            if (rtrim($pathinfo, '/') === '/user') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'user');
                }

                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::indexAction',  '_route' => 'user',);
            }

            // user_show
            if (preg_match('#^/user/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_show')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::showAction',));
            }

            // user_new
            if ($pathinfo === '/user/new') {
                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::newAction',  '_route' => 'user_new',);
            }

            // user_create
            if ($pathinfo === '/user/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_user_create;
                }

                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::createAction',  '_route' => 'user_create',);
            }
            not_user_create:

            // user_edit
            if (preg_match('#^/user/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_edit')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::editAction',));
            }

            // user_update
            if (preg_match('#^/user/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_user_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_update')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::updateAction',));
            }
            not_user_update:

            // user_delete
            if (preg_match('#^/user/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_user_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_delete')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::deleteAction',));
            }
            not_user_delete:

            // user_resetPassword
            if (preg_match('#^/user/(?P<id>[^/]++)/reset$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_resetPassword')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::resetPasswordAction',));
            }

        }

        // certificacion_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_homepage')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/certificacion')) {
            // certificacion
            if (preg_match('#^/certificacion/(?P<toexcel>[^/]++)/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'certificacion');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::indexAction',));
            }

            // certificacion_show
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_show')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::showAction',));
            }

            // certificacion_new
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/new$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_new')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::newAction',));
            }

            // certificacion_create
            if ($pathinfo === '/certificacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_certificacion_create;
                }

                return array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::createAction',  '_route' => 'certificacion_create',);
            }
            not_certificacion_create:

            // certificacion_edit
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_edit')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::editAction',));
            }

            // certificacion_update
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_certificacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_update')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::updateAction',));
            }
            not_certificacion_update:

            // certificacion_delete
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_certificacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_delete')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::deleteAction',));
            }
            not_certificacion_delete:

            // certificacion_individual
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/individualcertificacion$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::individualCertificacionAction',));
            }

            // certificacion_individual_imprimir
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/imprimir$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual_imprimir')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::certificacionIndividualPdfAction',));
            }

            // certificacion_individual_excel
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/excel$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual_excel')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::excelCertificacionIndAction',));
            }

            // certificacion_total_excel
            if (preg_match('#^/certificacion/(?P<entities>[^/]++)/excel$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_total_excel')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::excelCertificacionTotalAction',));
            }

        }

        // beca_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_homepage')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/tipo')) {
            if (0 === strpos($pathinfo, '/tipofuncion')) {
                // tipofuncion
                if (rtrim($pathinfo, '/') === '/tipofuncion') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tipofuncion');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::indexAction',  '_route' => 'tipofuncion',);
                }

                // tipofuncion_show
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::showAction',));
                }

                // tipofuncion_new
                if ($pathinfo === '/tipofuncion/new') {
                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::newAction',  '_route' => 'tipofuncion_new',);
                }

                // tipofuncion_create
                if ($pathinfo === '/tipofuncion/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_tipofuncion_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::createAction',  '_route' => 'tipofuncion_create',);
                }
                not_tipofuncion_create:

                // tipofuncion_edit
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::editAction',));
                }

                // tipofuncion_update
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_tipofuncion_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::updateAction',));
                }
                not_tipofuncion_update:

                // tipofuncion_delete
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_tipofuncion_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::deleteAction',));
                }
                not_tipofuncion_delete:

            }

            if (0 === strpos($pathinfo, '/tipobeca')) {
                // tipobeca
                if (rtrim($pathinfo, '/') === '/tipobeca') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tipobeca');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::indexAction',  '_route' => 'tipobeca',);
                }

                // tipobeca_show
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::showAction',));
                }

                // tipobeca_new
                if ($pathinfo === '/tipobeca/new') {
                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::newAction',  '_route' => 'tipobeca_new',);
                }

                // tipobeca_create
                if ($pathinfo === '/tipobeca/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_tipobeca_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::createAction',  '_route' => 'tipobeca_create',);
                }
                not_tipobeca_create:

                // tipobeca_edit
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::editAction',));
                }

                // tipobeca_update
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_tipobeca_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::updateAction',));
                }
                not_tipobeca_update:

                // tipobeca_delete
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_tipobeca_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::deleteAction',));
                }
                not_tipobeca_delete:

            }

        }

        if (0 === strpos($pathinfo, '/beca')) {
            // beca
            if (rtrim($pathinfo, '/') === '/beca') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'beca');
                }

                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::indexAction',  '_route' => 'beca',);
            }

            // beca_show
            if (preg_match('#^/beca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::showAction',));
            }

            // beca_new
            if ($pathinfo === '/beca/new') {
                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::newAction',  '_route' => 'beca_new',);
            }

            // beca_create
            if ($pathinfo === '/beca/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_beca_create;
                }

                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::createAction',  '_route' => 'beca_create',);
            }
            not_beca_create:

            // beca_edit
            if (preg_match('#^/beca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::editAction',));
            }

            // beca_update
            if (preg_match('#^/beca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_beca_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::updateAction',));
            }
            not_beca_update:

            // beca_delete
            if (preg_match('#^/beca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_beca_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::deleteAction',));
            }
            not_beca_delete:

            // beca_imprimir
            if ($pathinfo === '/beca/imprimir') {
                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::mypdfAction',  '_route' => 'beca_imprimir',);
            }

            if (0 === strpos($pathinfo, '/becadobeca')) {
                // becadobeca
                if (rtrim($pathinfo, '/') === '/becadobeca') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'becadobeca');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::indexAction',  '_route' => 'becadobeca',);
                }

                // becadobeca_show
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::showAction',));
                }

                // becadobeca_new
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/new$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_new')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::newAction',));
                }

                // becadobeca_create
                if ($pathinfo === '/becadobeca/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_becadobeca_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::createAction',  '_route' => 'becadobeca_create',);
                }
                not_becadobeca_create:

                // becadobeca_edit
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::editAction',));
                }

                // becadobeca_update
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_becadobeca_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::updateAction',));
                }
                not_becadobeca_update:

                // becadobeca_delete
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_becadobeca_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::deleteAction',));
                }
                not_becadobeca_delete:

            }

            if (0 === strpos($pathinfo, '/becavulnerable')) {
                // becavulnerable
                if (rtrim($pathinfo, '/') === '/becavulnerable') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'becavulnerable');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::indexAction',  '_route' => 'becavulnerable',);
                }

                // becavulnerable_show
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::showAction',));
                }

                // becavulnerable_new
                if (preg_match('#^/becavulnerable/(?P<becado>[^/]++)/new$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_new')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::newAction',));
                }

                // becavulnerable_create
                if (preg_match('#^/becavulnerable/(?P<becado>[^/]++)/create$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_becavulnerable_create;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_create')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::createAction',));
                }
                not_becavulnerable_create:

                // becavulnerable_edit
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::editAction',));
                }

                // becavulnerable_update
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_becavulnerable_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::updateAction',));
                }
                not_becavulnerable_update:

                // becavulnerable_delete
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_becavulnerable_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::deleteAction',));
                }
                not_becavulnerable_delete:

            }

        }

        // formacion_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_homepage')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/primario')) {
            // primario
            if (rtrim($pathinfo, '/') === '/primario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'primario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::indexAction',  '_route' => 'primario',);
            }

            // primario_show
            if (preg_match('#^/primario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::showAction',));
            }

            // primario_new
            if ($pathinfo === '/primario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::newAction',  '_route' => 'primario_new',);
            }

            // primario_create
            if ($pathinfo === '/primario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_primario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::createAction',  '_route' => 'primario_create',);
            }
            not_primario_create:

            // primario_edit
            if (preg_match('#^/primario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::editAction',));
            }

            // primario_update
            if (preg_match('#^/primario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_primario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::updateAction',));
            }
            not_primario_update:

            // primario_delete
            if (preg_match('#^/primario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_primario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::deleteAction',));
            }
            not_primario_delete:

        }

        if (0 === strpos($pathinfo, '/secundario')) {
            // secundario
            if (rtrim($pathinfo, '/') === '/secundario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'secundario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::indexAction',  '_route' => 'secundario',);
            }

            // secundario_show
            if (preg_match('#^/secundario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::showAction',));
            }

            // secundario_new
            if ($pathinfo === '/secundario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::newAction',  '_route' => 'secundario_new',);
            }

            // secundario_create
            if ($pathinfo === '/secundario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_secundario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::createAction',  '_route' => 'secundario_create',);
            }
            not_secundario_create:

            // secundario_edit
            if (preg_match('#^/secundario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::editAction',));
            }

            // secundario_update
            if (preg_match('#^/secundario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_secundario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::updateAction',));
            }
            not_secundario_update:

            // secundario_delete
            if (preg_match('#^/secundario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_secundario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::deleteAction',));
            }
            not_secundario_delete:

        }

        if (0 === strpos($pathinfo, '/terciario')) {
            // terciario
            if (rtrim($pathinfo, '/') === '/terciario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'terciario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::indexAction',  '_route' => 'terciario',);
            }

            // terciario_show
            if (preg_match('#^/terciario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::showAction',));
            }

            // terciario_new
            if ($pathinfo === '/terciario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::newAction',  '_route' => 'terciario_new',);
            }

            // terciario_create
            if ($pathinfo === '/terciario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_terciario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::createAction',  '_route' => 'terciario_create',);
            }
            not_terciario_create:

            // terciario_edit
            if (preg_match('#^/terciario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::editAction',));
            }

            // terciario_update
            if (preg_match('#^/terciario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_terciario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::updateAction',));
            }
            not_terciario_update:

            // terciario_delete
            if (preg_match('#^/terciario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_terciario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::deleteAction',));
            }
            not_terciario_delete:

        }

        if (0 === strpos($pathinfo, '/universidad')) {
            // universidad
            if (rtrim($pathinfo, '/') === '/universidad') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'universidad');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::indexAction',  '_route' => 'universidad',);
            }

            // universidad_show
            if (preg_match('#^/universidad/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::showAction',));
            }

            // universidad_new
            if ($pathinfo === '/universidad/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::newAction',  '_route' => 'universidad_new',);
            }

            // universidad_create
            if ($pathinfo === '/universidad/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_universidad_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::createAction',  '_route' => 'universidad_create',);
            }
            not_universidad_create:

            // universidad_edit
            if (preg_match('#^/universidad/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::editAction',));
            }

            // universidad_update
            if (preg_match('#^/universidad/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_universidad_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::updateAction',));
            }
            not_universidad_update:

            // universidad_delete
            if (preg_match('#^/universidad/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_universidad_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::deleteAction',));
            }
            not_universidad_delete:

        }

        if (0 === strpos($pathinfo, '/formacion')) {
            // formacion
            if (rtrim($pathinfo, '/') === '/formacion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'formacion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::indexAction',  '_route' => 'formacion',);
            }

            // formacion_show
            if (preg_match('#^/formacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::showAction',));
            }

            // formacion_new
            if ($pathinfo === '/formacion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::newAction',  '_route' => 'formacion_new',);
            }

            // formacion_create
            if ($pathinfo === '/formacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_formacion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::createAction',  '_route' => 'formacion_create',);
            }
            not_formacion_create:

            // formacion_edit
            if (preg_match('#^/formacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::editAction',));
            }

            // formacion_update
            if (preg_match('#^/formacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_formacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::updateAction',));
            }
            not_formacion_update:

            // formacion_delete
            if (preg_match('#^/formacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_formacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::deleteAction',));
            }
            not_formacion_delete:

        }

        if (0 === strpos($pathinfo, '/profesion')) {
            // profesion
            if (rtrim($pathinfo, '/') === '/profesion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'profesion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::indexAction',  '_route' => 'profesion',);
            }

            // profesion_show
            if (preg_match('#^/profesion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::showAction',));
            }

            // profesion_new
            if ($pathinfo === '/profesion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::newAction',  '_route' => 'profesion_new',);
            }

            // profesion_create
            if ($pathinfo === '/profesion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_profesion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::createAction',  '_route' => 'profesion_create',);
            }
            not_profesion_create:

            // profesion_edit
            if (preg_match('#^/profesion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::editAction',));
            }

            // profesion_update
            if (preg_match('#^/profesion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_profesion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::updateAction',));
            }
            not_profesion_update:

            // profesion_delete
            if (preg_match('#^/profesion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_profesion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::deleteAction',));
            }
            not_profesion_delete:

        }

        if (0 === strpos($pathinfo, '/niveleducativo')) {
            // niveleducativo
            if (rtrim($pathinfo, '/') === '/niveleducativo') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'niveleducativo');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::indexAction',  '_route' => 'niveleducativo',);
            }

            // niveleducativo_show
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::showAction',));
            }

            // niveleducativo_new
            if ($pathinfo === '/niveleducativo/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::newAction',  '_route' => 'niveleducativo_new',);
            }

            // niveleducativo_create
            if ($pathinfo === '/niveleducativo/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_niveleducativo_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::createAction',  '_route' => 'niveleducativo_create',);
            }
            not_niveleducativo_create:

            // niveleducativo_edit
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::editAction',));
            }

            // niveleducativo_update
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_niveleducativo_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::updateAction',));
            }
            not_niveleducativo_update:

            // niveleducativo_delete
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_niveleducativo_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::deleteAction',));
            }
            not_niveleducativo_delete:

        }

        if (0 === strpos($pathinfo, '/institucion')) {
            // institucion
            if (rtrim($pathinfo, '/') === '/institucion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'institucion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::indexAction',  '_route' => 'institucion',);
            }

            // institucion_show
            if (preg_match('#^/institucion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::showAction',));
            }

            // institucion_new
            if ($pathinfo === '/institucion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::newAction',  '_route' => 'institucion_new',);
            }

            // institucion_create
            if ($pathinfo === '/institucion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_institucion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::createAction',  '_route' => 'institucion_create',);
            }
            not_institucion_create:

            // institucion_edit
            if (preg_match('#^/institucion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::editAction',));
            }

            // institucion_update
            if (preg_match('#^/institucion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_institucion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::updateAction',));
            }
            not_institucion_update:

            // institucion_delete
            if (preg_match('#^/institucion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_institucion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::deleteAction',));
            }
            not_institucion_delete:

        }

        if (0 === strpos($pathinfo, '/perfil')) {
            // perfil
            if (rtrim($pathinfo, '/') === '/perfil') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'perfil');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::indexAction',  '_route' => 'perfil',);
            }

            // perfil_show
            if (preg_match('#^/perfil/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::showAction',));
            }

            // perfil_new
            if ($pathinfo === '/perfil/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::newAction',  '_route' => 'perfil_new',);
            }

            // perfil_create
            if ($pathinfo === '/perfil/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_perfil_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::createAction',  '_route' => 'perfil_create',);
            }
            not_perfil_create:

            // perfil_edit
            if (preg_match('#^/perfil/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::editAction',));
            }

            // perfil_update
            if (preg_match('#^/perfil/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_perfil_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::updateAction',));
            }
            not_perfil_update:

            // perfil_delete
            if (preg_match('#^/perfil/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_perfil_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::deleteAction',));
            }
            not_perfil_delete:

        }

        if (0 === strpos($pathinfo, '/oficio')) {
            // oficio
            if (rtrim($pathinfo, '/') === '/oficio') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'oficio');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::indexAction',  '_route' => 'oficio',);
            }

            // oficio_show
            if (preg_match('#^/oficio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::showAction',));
            }

            // oficio_new
            if ($pathinfo === '/oficio/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::newAction',  '_route' => 'oficio_new',);
            }

            // oficio_create
            if ($pathinfo === '/oficio/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_oficio_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::createAction',  '_route' => 'oficio_create',);
            }
            not_oficio_create:

            // oficio_edit
            if (preg_match('#^/oficio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::editAction',));
            }

            // oficio_update
            if (preg_match('#^/oficio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_oficio_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::updateAction',));
            }
            not_oficio_update:

            // oficio_delete
            if (preg_match('#^/oficio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_oficio_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::deleteAction',));
            }
            not_oficio_delete:

        }

        // persona_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'persona_homepage')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/calle')) {
            // calle
            if (rtrim($pathinfo, '/') === '/calle') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calle');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::indexAction',  '_route' => 'calle',);
            }

            // calle_show
            if (preg_match('#^/calle/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::showAction',));
            }

            // calle_new
            if ($pathinfo === '/calle/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::newAction',  '_route' => 'calle_new',);
            }

            // calle_create
            if ($pathinfo === '/calle/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_calle_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::createAction',  '_route' => 'calle_create',);
            }
            not_calle_create:

            // calle_edit
            if (preg_match('#^/calle/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::editAction',));
            }

            // calle_update
            if (preg_match('#^/calle/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_calle_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::updateAction',));
            }
            not_calle_update:

            // calle_delete
            if (preg_match('#^/calle/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_calle_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::deleteAction',));
            }
            not_calle_delete:

        }

        if (0 === strpos($pathinfo, '/barrio')) {
            // barrio
            if (rtrim($pathinfo, '/') === '/barrio') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'barrio');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::indexAction',  '_route' => 'barrio',);
            }

            // barrio_show
            if (preg_match('#^/barrio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::showAction',));
            }

            // barrio_new
            if ($pathinfo === '/barrio/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::newAction',  '_route' => 'barrio_new',);
            }

            // barrio_create
            if ($pathinfo === '/barrio/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_barrio_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::createAction',  '_route' => 'barrio_create',);
            }
            not_barrio_create:

            // barrio_edit
            if (preg_match('#^/barrio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::editAction',));
            }

            // barrio_update
            if (preg_match('#^/barrio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_barrio_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::updateAction',));
            }
            not_barrio_update:

            // barrio_delete
            if (preg_match('#^/barrio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_barrio_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::deleteAction',));
            }
            not_barrio_delete:

        }

        if (0 === strpos($pathinfo, '/localidad')) {
            // localidad
            if (rtrim($pathinfo, '/') === '/localidad') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'localidad');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::indexAction',  '_route' => 'localidad',);
            }

            // localidad_show
            if (preg_match('#^/localidad/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::showAction',));
            }

            // localidad_new
            if ($pathinfo === '/localidad/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::newAction',  '_route' => 'localidad_new',);
            }

            // localidad_create
            if ($pathinfo === '/localidad/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_localidad_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::createAction',  '_route' => 'localidad_create',);
            }
            not_localidad_create:

            // localidad_edit
            if (preg_match('#^/localidad/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::editAction',));
            }

            // localidad_update
            if (preg_match('#^/localidad/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_localidad_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::updateAction',));
            }
            not_localidad_update:

            // localidad_delete
            if (preg_match('#^/localidad/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_localidad_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::deleteAction',));
            }
            not_localidad_delete:

            // localidad_ajax
            if ($pathinfo === '/localidad/localidadajax') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::localidadAjaxAction',  '_route' => 'localidad_ajax',);
            }

            // localidad_id_ajax
            if (0 === strpos($pathinfo, '/localidad/getlocalidad') && preg_match('#^/localidad/getlocalidad/(?P<ids>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_id_ajax')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::localidadIdAjaxAction',));
            }

        }

        if (0 === strpos($pathinfo, '/departamento')) {
            // departamento
            if (rtrim($pathinfo, '/') === '/departamento') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'departamento');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::indexAction',  '_route' => 'departamento',);
            }

            // departamento_show
            if (preg_match('#^/departamento/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::showAction',));
            }

            // departamento_new
            if ($pathinfo === '/departamento/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::newAction',  '_route' => 'departamento_new',);
            }

            // departamento_create
            if ($pathinfo === '/departamento/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_departamento_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::createAction',  '_route' => 'departamento_create',);
            }
            not_departamento_create:

            // departamento_edit
            if (preg_match('#^/departamento/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::editAction',));
            }

            // departamento_update
            if (preg_match('#^/departamento/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_departamento_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::updateAction',));
            }
            not_departamento_update:

            // departamento_delete
            if (preg_match('#^/departamento/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_departamento_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::deleteAction',));
            }
            not_departamento_delete:

        }

        if (0 === strpos($pathinfo, '/referente')) {
            // referente
            if (rtrim($pathinfo, '/') === '/referente') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'referente');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::indexAction',  '_route' => 'referente',);
            }

            // referente_show
            if (preg_match('#^/referente/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::showAction',));
            }

            // referente_new
            if ($pathinfo === '/referente/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::newAction',  '_route' => 'referente_new',);
            }

            // referente_create
            if ($pathinfo === '/referente/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_referente_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::createAction',  '_route' => 'referente_create',);
            }
            not_referente_create:

            // referente_edit
            if (preg_match('#^/referente/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::editAction',));
            }

            // referente_update
            if (preg_match('#^/referente/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_referente_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::updateAction',));
            }
            not_referente_update:

            // referente_delete
            if (preg_match('#^/referente/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_referente_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::deleteAction',));
            }
            not_referente_delete:

        }

        if (0 === strpos($pathinfo, '/movimientosocial')) {
            // movimientosocial
            if (rtrim($pathinfo, '/') === '/movimientosocial') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'movimientosocial');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::indexAction',  '_route' => 'movimientosocial',);
            }

            // movimientosocial_show
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::showAction',));
            }

            // movimientosocial_new
            if ($pathinfo === '/movimientosocial/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::newAction',  '_route' => 'movimientosocial_new',);
            }

            // movimientosocial_create
            if ($pathinfo === '/movimientosocial/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_movimientosocial_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::createAction',  '_route' => 'movimientosocial_create',);
            }
            not_movimientosocial_create:

            // movimientosocial_edit
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::editAction',));
            }

            // movimientosocial_update
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_movimientosocial_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::updateAction',));
            }
            not_movimientosocial_update:

            // movimientosocial_delete
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_movimientosocial_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::deleteAction',));
            }
            not_movimientosocial_delete:

        }

        if (0 === strpos($pathinfo, '/responsable')) {
            // responsable
            if (rtrim($pathinfo, '/') === '/responsable') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'responsable');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::indexAction',  '_route' => 'responsable',);
            }

            // responsable_show
            if (preg_match('#^/responsable/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::showAction',));
            }

            // responsable_new
            if ($pathinfo === '/responsable/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::newAction',  '_route' => 'responsable_new',);
            }

            // responsable_create
            if ($pathinfo === '/responsable/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_responsable_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::createAction',  '_route' => 'responsable_create',);
            }
            not_responsable_create:

            // responsable_edit
            if (preg_match('#^/responsable/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::editAction',));
            }

            // responsable_update
            if (preg_match('#^/responsable/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_responsable_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::updateAction',));
            }
            not_responsable_update:

            // responsable_delete
            if (preg_match('#^/responsable/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_responsable_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::deleteAction',));
            }
            not_responsable_delete:

        }

        if (0 === strpos($pathinfo, '/d')) {
            if (0 === strpos($pathinfo, '/dependencia')) {
                // dependencia
                if (rtrim($pathinfo, '/') === '/dependencia') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dependencia');
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::indexAction',  '_route' => 'dependencia',);
                }

                // dependencia_show
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::showAction',));
                }

                // dependencia_new
                if ($pathinfo === '/dependencia/new') {
                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::newAction',  '_route' => 'dependencia_new',);
                }

                // dependencia_create
                if ($pathinfo === '/dependencia/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dependencia_create;
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::createAction',  '_route' => 'dependencia_create',);
                }
                not_dependencia_create:

                // dependencia_edit
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::editAction',));
                }

                // dependencia_update
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_dependencia_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::updateAction',));
                }
                not_dependencia_update:

                // dependencia_delete
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_dependencia_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::deleteAction',));
                }
                not_dependencia_delete:

            }

            if (0 === strpos($pathinfo, '/domicilio')) {
                // domicilio
                if (rtrim($pathinfo, '/') === '/domicilio') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'domicilio');
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::indexAction',  '_route' => 'domicilio',);
                }

                // domicilio_show
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::showAction',));
                }

                // domicilio_new
                if ($pathinfo === '/domicilio/new') {
                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::newAction',  '_route' => 'domicilio_new',);
                }

                // domicilio_create
                if ($pathinfo === '/domicilio/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_domicilio_create;
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::createAction',  '_route' => 'domicilio_create',);
                }
                not_domicilio_create:

                // domicilio_edit
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::editAction',));
                }

                // domicilio_update
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_domicilio_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::updateAction',));
                }
                not_domicilio_update:

                // domicilio_delete
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_domicilio_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::deleteAction',));
                }
                not_domicilio_delete:

            }

        }

        // find_objects
        if ($pathinfo === '/findreferente') {
            return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::findReferenteAction',  '_route' => 'find_objects',);
        }

        // get_objects
        if (0 === strpos($pathinfo, '/getreferente') && preg_match('#^/getreferente/(?P<ids>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'get_objects')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::getReferenteAction',));
        }

        if (0 === strpos($pathinfo, '/becado')) {
            // becado
            if (rtrim($pathinfo, '/') === '/becado') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'becado');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::indexAction',  '_route' => 'becado',);
            }

            // becado_show
            if (preg_match('#^/becado/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::showAction',));
            }

            // becado_new
            if ($pathinfo === '/becado/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::newAction',  '_route' => 'becado_new',);
            }

            // becado_create
            if ($pathinfo === '/becado/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_becado_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::createAction',  '_route' => 'becado_create',);
            }
            not_becado_create:

            // becado_edit
            if (preg_match('#^/becado/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::editAction',));
            }

            // becado_update
            if (preg_match('#^/becado/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_becado_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::updateAction',));
            }
            not_becado_update:

            // becado_delete
            if (preg_match('#^/becado/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_becado_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::deleteAction',));
            }
            not_becado_delete:

            // ajax_dni
            if (preg_match('#^/becado/(?P<dni>[^/]++)/ajaxdni$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ajax_dni')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::ajaxDniAction',));
            }

        }

        if (0 === strpos($pathinfo, '/lugarafectacion')) {
            // lugarafectacion
            if (rtrim($pathinfo, '/') === '/lugarafectacion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'lugarafectacion');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::indexAction',  '_route' => 'lugarafectacion',);
            }

            // lugarafectacion_show
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::showAction',));
            }

            // lugarafectacion_new
            if ($pathinfo === '/lugarafectacion/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::newAction',  '_route' => 'lugarafectacion_new',);
            }

            // lugarafectacion_create
            if ($pathinfo === '/lugarafectacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_lugarafectacion_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::createAction',  '_route' => 'lugarafectacion_create',);
            }
            not_lugarafectacion_create:

            // lugarafectacion_edit
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::editAction',));
            }

            // lugarafectacion_update
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_lugarafectacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::updateAction',));
            }
            not_lugarafectacion_update:

            // lugarafectacion_delete
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_lugarafectacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::deleteAction',));
            }
            not_lugarafectacion_delete:

        }

        // fos_js_routing_js
        if (0 === strpos($pathinfo, '/js/routing') && preg_match('#^/js/routing(?:\\.(?P<_format>js|json))?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_js_routing_js')), array (  '_controller' => 'fos_js_routing.controller:indexAction',  '_format' => 'js',));
        }

        if (0 === strpos($pathinfo, '/shtumi_')) {
            // shtumi_ajaxautocomplete
            if ($pathinfo === '/shtumi_ajaxautocomplete') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\AjaxAutocompleteJSONController::getJSONAction',  '_route' => 'shtumi_ajaxautocomplete',);
            }

            // shtumi_select2_entity
            if ($pathinfo === '/shtumi_select2_entity') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\Select2EntityController::getJSONAction',  '_route' => 'shtumi_select2_entity',);
            }

            // shtumi_ajaxfileupload
            if ($pathinfo === '/shtumi_ajaxfileupload') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\AjaxFileController::uploadAction',  '_route' => 'shtumi_ajaxfileupload',);
            }

            if (0 === strpos($pathinfo, '/shtumi_dependent_filtered_')) {
                // shtumi_dependent_filtered_entity
                if ($pathinfo === '/shtumi_dependent_filtered_entity') {
                    return array (  '_controller' => 'ShtumiUsefulBundle:DependentFilteredEntity:getOptions',  '_route' => 'shtumi_dependent_filtered_entity',);
                }

                // shtumi_dependent_filtered_select2
                if ($pathinfo === '/shtumi_dependent_filtered_select2') {
                    return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\DependentFilteredEntityController::getJsonAction',  '_route' => 'shtumi_dependent_filtered_select2',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/log')) {
            if (0 === strpos($pathinfo, '/login')) {
                // fos_user_security_login
                if ($pathinfo === '/login') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_security_login;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  '_route' => 'fos_user_security_login',);
                }
                not_fos_user_security_login:

                // fos_user_security_check
                if ($pathinfo === '/login_check') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_security_check;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  '_route' => 'fos_user_security_check',);
                }
                not_fos_user_security_check:

            }

            // fos_user_security_logout
            if ($pathinfo === '/logout') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_security_logout;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  '_route' => 'fos_user_security_logout',);
            }
            not_fos_user_security_logout:

        }

        if (0 === strpos($pathinfo, '/profile')) {
            // fos_user_profile_show
            if (rtrim($pathinfo, '/') === '/profile') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_profile_show;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fos_user_profile_show');
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  '_route' => 'fos_user_profile_show',);
            }
            not_fos_user_profile_show:

            // fos_user_profile_edit
            if ($pathinfo === '/profile/edit') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_fos_user_profile_edit;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  '_route' => 'fos_user_profile_edit',);
            }
            not_fos_user_profile_edit:

        }

        if (0 === strpos($pathinfo, '/re')) {
            if (0 === strpos($pathinfo, '/register')) {
                // fos_user_registration_register
                if (rtrim($pathinfo, '/') === '/register') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_registration_register;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fos_user_registration_register');
                    }

                    return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::registerAction',  '_route' => 'fos_user_registration_register',);
                }
                not_fos_user_registration_register:

                if (0 === strpos($pathinfo, '/register/c')) {
                    // fos_user_registration_check_email
                    if ($pathinfo === '/register/check-email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_registration_check_email;
                        }

                        return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::checkEmailAction',  '_route' => 'fos_user_registration_check_email',);
                    }
                    not_fos_user_registration_check_email:

                    if (0 === strpos($pathinfo, '/register/confirm')) {
                        // fos_user_registration_confirm
                        if (preg_match('#^/register/confirm/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirm;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_registration_confirm')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::confirmAction',));
                        }
                        not_fos_user_registration_confirm:

                        // fos_user_registration_confirmed
                        if ($pathinfo === '/register/confirmed') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirmed;
                            }

                            return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::confirmedAction',  '_route' => 'fos_user_registration_confirmed',);
                        }
                        not_fos_user_registration_confirmed:

                    }

                }

            }

            if (0 === strpos($pathinfo, '/resetting')) {
                // fos_user_resetting_request
                if ($pathinfo === '/resetting/request') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_request;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  '_route' => 'fos_user_resetting_request',);
                }
                not_fos_user_resetting_request:

                // fos_user_resetting_send_email
                if ($pathinfo === '/resetting/send-email') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_resetting_send_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  '_route' => 'fos_user_resetting_send_email',);
                }
                not_fos_user_resetting_send_email:

                // fos_user_resetting_check_email
                if ($pathinfo === '/resetting/check-email') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_check_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  '_route' => 'fos_user_resetting_check_email',);
                }
                not_fos_user_resetting_check_email:

                // fos_user_resetting_reset
                if (0 === strpos($pathinfo, '/resetting/reset') && preg_match('#^/resetting/reset/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_resetting_reset;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_resetting_reset')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',));
                }
                not_fos_user_resetting_reset:

            }

        }

        // fos_user_change_password
        if ($pathinfo === '/profile/change-password') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_fos_user_change_password;
            }

            return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  '_route' => 'fos_user_change_password',);
        }
        not_fos_user_change_password:

        // inicio
        if (rtrim($pathinfo, '/') === '') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'inicio');
            }

            return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\DefaultController::indexAction',  '_route' => 'inicio',);
        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
";}i:2;a:2:{i:0;s:4:"null";i:1;N;}}}i:3;a:8:{s:9:"namespace";s:24:"Symfony\Component\Config";s:11:"short_class";s:11:"ConfigCache";s:5:"class";s:36:"Symfony\Component\Config\ConfigCache";s:4:"type";s:2:"->";s:8:"function";s:5:"write";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1243;s:4:"args";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:124262:"<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appDevUrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);

        if (0 === strpos($pathinfo, '/fonts/glyphicons-halflings')) {
            // _assetic_font_awesome_ttf
            if ($pathinfo === '/fonts/glyphicons-halflings.ttf') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'font_awesome_ttf',  'pos' => NULL,  '_format' => 'ttf',  '_route' => '_assetic_font_awesome_ttf',);
            }

            // _assetic_font_awesome_ttf_0
            if ($pathinfo === '/fonts/glyphicons-halflings_glyphicons-halflings_1.ttf') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'font_awesome_ttf',  'pos' => 0,  '_format' => 'ttf',  '_route' => '_assetic_font_awesome_ttf_0',);
            }

        }

        if (0 === strpos($pathinfo, '/images/logoDesarrolloSocial-medium')) {
            // _assetic_images_login
            if ($pathinfo === '/images/logoDesarrolloSocial-medium.jpg') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'images_login',  'pos' => NULL,  '_format' => 'jpg',  '_route' => '_assetic_images_login',);
            }

            // _assetic_images_login_0
            if ($pathinfo === '/images/logoDesarrolloSocial-medium_logoDesarrolloSocial-medium_1.jpg') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'images_login',  'pos' => 0,  '_format' => 'jpg',  '_route' => '_assetic_images_login_0',);
            }

        }

        if (0 === strpos($pathinfo, '/js')) {
            // _assetic_persona_jquery_ui
            if ($pathinfo === '/js/jquery.ui.js') {
                return array (  '_controller' => 'assetic.controller:render',  'name' => 'persona_jquery_ui',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_persona_jquery_ui',);
            }

            if (0 === strpos($pathinfo, '/js/c2447d5')) {
                // _assetic_c2447d5
                if ($pathinfo === '/js/c2447d5.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_c2447d5',);
                }

                if (0 === strpos($pathinfo, '/js/c2447d5_')) {
                    // _assetic_c2447d5_0
                    if ($pathinfo === '/js/c2447d5_jquery-ui_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_c2447d5_0',);
                    }

                    if (0 === strpos($pathinfo, '/js/c2447d5_a')) {
                        if (0 === strpos($pathinfo, '/js/c2447d5_agregar')) {
                            // _assetic_c2447d5_1
                            if ($pathinfo === '/js/c2447d5_agregarDomicilio_2.js') {
                                return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_c2447d5_1',);
                            }

                            // _assetic_c2447d5_2
                            if ($pathinfo === '/js/c2447d5_agregarFormacion_3.js') {
                                return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 2,  '_format' => 'js',  '_route' => '_assetic_c2447d5_2',);
                            }

                        }

                        // _assetic_c2447d5_3
                        if ($pathinfo === '/js/c2447d5_addForm_4.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 3,  '_format' => 'js',  '_route' => '_assetic_c2447d5_3',);
                        }

                    }

                    // _assetic_c2447d5_4
                    if ($pathinfo === '/js/c2447d5_deleteRow_5.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 4,  '_format' => 'js',  '_route' => '_assetic_c2447d5_4',);
                    }

                    if (0 === strpos($pathinfo, '/js/c2447d5_select2')) {
                        // _assetic_c2447d5_5
                        if ($pathinfo === '/js/c2447d5_select2_6.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 5,  '_format' => 'js',  '_route' => '_assetic_c2447d5_5',);
                        }

                        // _assetic_c2447d5_6
                        if ($pathinfo === '/js/c2447d5_select2Becado_7.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 6,  '_format' => 'js',  '_route' => '_assetic_c2447d5_6',);
                        }

                    }

                    // _assetic_c2447d5_7
                    if ($pathinfo === '/js/c2447d5_dalert.jquery.min_8.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 7,  '_format' => 'js',  '_route' => '_assetic_c2447d5_7',);
                    }

                    // _assetic_c2447d5_8
                    if ($pathinfo === '/js/c2447d5_ajax-functions_9.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c2447d5',  'pos' => 8,  '_format' => 'js',  '_route' => '_assetic_c2447d5_8',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/e7e8cb1')) {
                // _assetic_e7e8cb1
                if ($pathinfo === '/js/e7e8cb1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e7e8cb1',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_e7e8cb1',);
                }

                // _assetic_e7e8cb1_0
                if ($pathinfo === '/js/e7e8cb1_part_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e7e8cb1',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_e7e8cb1_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/3cf3039')) {
                // _assetic_3cf3039
                if ($pathinfo === '/js/3cf3039.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '3cf3039',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_3cf3039',);
                }

                // _assetic_3cf3039_0
                if ($pathinfo === '/js/3cf3039_select2_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '3cf3039',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_3cf3039_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/c09786c')) {
                // _assetic_c09786c
                if ($pathinfo === '/js/c09786c.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_c09786c',);
                }

                if (0 === strpos($pathinfo, '/js/c09786c_select2')) {
                    // _assetic_c09786c_0
                    if ($pathinfo === '/js/c09786c_select2_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_c09786c_0',);
                    }

                    // _assetic_c09786c_1
                    if ($pathinfo === '/js/c09786c_select2Becado_2.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'c09786c',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_c09786c_1',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/84b4787')) {
                // _assetic_84b4787
                if ($pathinfo === '/js/84b4787.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_84b4787',);
                }

                if (0 === strpos($pathinfo, '/js/84b4787_select2')) {
                    // _assetic_84b4787_0
                    if ($pathinfo === '/js/84b4787_select2_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_84b4787_0',);
                    }

                    // _assetic_84b4787_1
                    if ($pathinfo === '/js/84b4787_select2Formacion_2.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '84b4787',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_84b4787_1',);
                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/e604a14')) {
                // _assetic_e604a14
                if ($pathinfo === '/js/e604a14.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_e604a14',);
                }

                if (0 === strpos($pathinfo, '/js/e604a14_')) {
                    // _assetic_e604a14_0
                    if ($pathinfo === '/js/e604a14_jquery-1.9.0_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_e604a14_0',);
                    }

                    if (0 === strpos($pathinfo, '/js/e604a14_select2')) {
                        // _assetic_e604a14_1
                        if ($pathinfo === '/js/e604a14_select2_2.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_e604a14_1',);
                        }

                        // _assetic_e604a14_2
                        if ($pathinfo === '/js/e604a14_select2Becado_3.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => 'e604a14',  'pos' => 2,  '_format' => 'js',  '_route' => '_assetic_e604a14_2',);
                        }

                    }

                }

            }

            if (0 === strpos($pathinfo, '/js/0d77cf1')) {
                // _assetic_0d77cf1
                if ($pathinfo === '/js/0d77cf1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '0d77cf1',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_0d77cf1',);
                }

                // _assetic_0d77cf1_0
                if ($pathinfo === '/js/0d77cf1_part_1_funcionescertificacionbundle_1.js') {
                    return array (  '_controller' => 'assetic.controller:render',  'name' => '0d77cf1',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_0d77cf1_0',);
                }

            }

            if (0 === strpos($pathinfo, '/js/3')) {
                if (0 === strpos($pathinfo, '/js/3aa7f8d')) {
                    // _assetic_3aa7f8d
                    if ($pathinfo === '/js/3aa7f8d.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '3aa7f8d',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_3aa7f8d',);
                    }

                    // _assetic_3aa7f8d_0
                    if ($pathinfo === '/js/3aa7f8d_jquery-1.9.0_1.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '3aa7f8d',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_3aa7f8d_0',);
                    }

                }

                if (0 === strpos($pathinfo, '/js/30d8e69')) {
                    // _assetic_30d8e69
                    if ($pathinfo === '/js/30d8e69.js') {
                        return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => NULL,  '_format' => 'js',  '_route' => '_assetic_30d8e69',);
                    }

                    if (0 === strpos($pathinfo, '/js/30d8e69_')) {
                        // _assetic_30d8e69_0
                        if ($pathinfo === '/js/30d8e69_jquery-1.9.0_1.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => 0,  '_format' => 'js',  '_route' => '_assetic_30d8e69_0',);
                        }

                        // _assetic_30d8e69_1
                        if ($pathinfo === '/js/30d8e69_select2_2.js') {
                            return array (  '_controller' => 'assetic.controller:render',  'name' => '30d8e69',  'pos' => 1,  '_format' => 'js',  '_route' => '_assetic_30d8e69_1',);
                        }

                    }

                }

            }

        }

        if (0 === strpos($pathinfo, '/_')) {
            // _wdt
            if (0 === strpos($pathinfo, '/_wdt') && preg_match('#^/_wdt/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => '_wdt')), array (  '_controller' => 'web_profiler.controller.profiler:toolbarAction',));
            }

            if (0 === strpos($pathinfo, '/_profiler')) {
                // _profiler_home
                if (rtrim($pathinfo, '/') === '/_profiler') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_profiler_home');
                    }

                    return array (  '_controller' => 'web_profiler.controller.profiler:homeAction',  '_route' => '_profiler_home',);
                }

                if (0 === strpos($pathinfo, '/_profiler/search')) {
                    // _profiler_search
                    if ($pathinfo === '/_profiler/search') {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchAction',  '_route' => '_profiler_search',);
                    }

                    // _profiler_search_bar
                    if ($pathinfo === '/_profiler/search_bar') {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchBarAction',  '_route' => '_profiler_search_bar',);
                    }

                }

                // _profiler_purge
                if ($pathinfo === '/_profiler/purge') {
                    return array (  '_controller' => 'web_profiler.controller.profiler:purgeAction',  '_route' => '_profiler_purge',);
                }

                // _profiler_info
                if (0 === strpos($pathinfo, '/_profiler/info') && preg_match('#^/_profiler/info/(?P<about>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_info')), array (  '_controller' => 'web_profiler.controller.profiler:infoAction',));
                }

                // _profiler_phpinfo
                if ($pathinfo === '/_profiler/phpinfo') {
                    return array (  '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  '_route' => '_profiler_phpinfo',);
                }

                // _profiler_search_results
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/search/results$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_search_results')), array (  '_controller' => 'web_profiler.controller.profiler:searchResultsAction',));
                }

                // _profiler
                if (preg_match('#^/_profiler/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler')), array (  '_controller' => 'web_profiler.controller.profiler:panelAction',));
                }

                // _profiler_router
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/router$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_router')), array (  '_controller' => 'web_profiler.controller.router:panelAction',));
                }

                // _profiler_exception
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception')), array (  '_controller' => 'web_profiler.controller.exception:showAction',));
                }

                // _profiler_exception_css
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception\\.css$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_profiler_exception_css')), array (  '_controller' => 'web_profiler.controller.exception:cssAction',));
                }

            }

            if (0 === strpos($pathinfo, '/_configurator')) {
                // _configurator_home
                if (rtrim($pathinfo, '/') === '/_configurator') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', '_configurator_home');
                    }

                    return array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  '_route' => '_configurator_home',);
                }

                // _configurator_step
                if (0 === strpos($pathinfo, '/_configurator/step') && preg_match('#^/_configurator/step/(?P<index>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => '_configurator_step')), array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',));
                }

                // _configurator_final
                if ($pathinfo === '/_configurator/final') {
                    return array (  '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  '_route' => '_configurator_final',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/user')) {
            // user
            if (rtrim($pathinfo, '/') === '/user') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'user');
                }

                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::indexAction',  '_route' => 'user',);
            }

            // user_show
            if (preg_match('#^/user/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_show')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::showAction',));
            }

            // user_new
            if ($pathinfo === '/user/new') {
                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::newAction',  '_route' => 'user_new',);
            }

            // user_create
            if ($pathinfo === '/user/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_user_create;
                }

                return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::createAction',  '_route' => 'user_create',);
            }
            not_user_create:

            // user_edit
            if (preg_match('#^/user/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_edit')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::editAction',));
            }

            // user_update
            if (preg_match('#^/user/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_user_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_update')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::updateAction',));
            }
            not_user_update:

            // user_delete
            if (preg_match('#^/user/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_user_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_delete')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::deleteAction',));
            }
            not_user_delete:

            // user_resetPassword
            if (preg_match('#^/user/(?P<id>[^/]++)/reset$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_resetPassword')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\UserController::resetPasswordAction',));
            }

        }

        // certificacion_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_homepage')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/certificacion')) {
            // certificacion
            if (preg_match('#^/certificacion/(?P<toexcel>[^/]++)/?$#s', $pathinfo, $matches)) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'certificacion');
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::indexAction',));
            }

            // certificacion_show
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_show')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::showAction',));
            }

            // certificacion_new
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/new$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_new')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::newAction',));
            }

            // certificacion_create
            if ($pathinfo === '/certificacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_certificacion_create;
                }

                return array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::createAction',  '_route' => 'certificacion_create',);
            }
            not_certificacion_create:

            // certificacion_edit
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_edit')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::editAction',));
            }

            // certificacion_update
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_certificacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_update')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::updateAction',));
            }
            not_certificacion_update:

            // certificacion_delete
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_certificacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_delete')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::deleteAction',));
            }
            not_certificacion_delete:

            // certificacion_individual
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/individualcertificacion$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::individualCertificacionAction',));
            }

            // certificacion_individual_imprimir
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/imprimir$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual_imprimir')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::certificacionIndividualPdfAction',));
            }

            // certificacion_individual_excel
            if (preg_match('#^/certificacion/(?P<id>[^/]++)/excel$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_individual_excel')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::excelCertificacionIndAction',));
            }

            // certificacion_total_excel
            if (preg_match('#^/certificacion/(?P<entities>[^/]++)/excel$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'certificacion_total_excel')), array (  '_controller' => 'BecasMds\\CertificacionBundle\\Controller\\CertificacionController::excelCertificacionTotalAction',));
            }

        }

        // beca_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_homepage')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/tipo')) {
            if (0 === strpos($pathinfo, '/tipofuncion')) {
                // tipofuncion
                if (rtrim($pathinfo, '/') === '/tipofuncion') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tipofuncion');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::indexAction',  '_route' => 'tipofuncion',);
                }

                // tipofuncion_show
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::showAction',));
                }

                // tipofuncion_new
                if ($pathinfo === '/tipofuncion/new') {
                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::newAction',  '_route' => 'tipofuncion_new',);
                }

                // tipofuncion_create
                if ($pathinfo === '/tipofuncion/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_tipofuncion_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::createAction',  '_route' => 'tipofuncion_create',);
                }
                not_tipofuncion_create:

                // tipofuncion_edit
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::editAction',));
                }

                // tipofuncion_update
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_tipofuncion_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::updateAction',));
                }
                not_tipofuncion_update:

                // tipofuncion_delete
                if (preg_match('#^/tipofuncion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_tipofuncion_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipofuncion_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoFuncionController::deleteAction',));
                }
                not_tipofuncion_delete:

            }

            if (0 === strpos($pathinfo, '/tipobeca')) {
                // tipobeca
                if (rtrim($pathinfo, '/') === '/tipobeca') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'tipobeca');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::indexAction',  '_route' => 'tipobeca',);
                }

                // tipobeca_show
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::showAction',));
                }

                // tipobeca_new
                if ($pathinfo === '/tipobeca/new') {
                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::newAction',  '_route' => 'tipobeca_new',);
                }

                // tipobeca_create
                if ($pathinfo === '/tipobeca/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_tipobeca_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::createAction',  '_route' => 'tipobeca_create',);
                }
                not_tipobeca_create:

                // tipobeca_edit
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::editAction',));
                }

                // tipobeca_update
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_tipobeca_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::updateAction',));
                }
                not_tipobeca_update:

                // tipobeca_delete
                if (preg_match('#^/tipobeca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_tipobeca_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'tipobeca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\TipoBecaController::deleteAction',));
                }
                not_tipobeca_delete:

            }

        }

        if (0 === strpos($pathinfo, '/beca')) {
            // beca
            if (rtrim($pathinfo, '/') === '/beca') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'beca');
                }

                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::indexAction',  '_route' => 'beca',);
            }

            // beca_show
            if (preg_match('#^/beca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::showAction',));
            }

            // beca_new
            if ($pathinfo === '/beca/new') {
                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::newAction',  '_route' => 'beca_new',);
            }

            // beca_create
            if ($pathinfo === '/beca/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_beca_create;
                }

                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::createAction',  '_route' => 'beca_create',);
            }
            not_beca_create:

            // beca_edit
            if (preg_match('#^/beca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::editAction',));
            }

            // beca_update
            if (preg_match('#^/beca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_beca_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::updateAction',));
            }
            not_beca_update:

            // beca_delete
            if (preg_match('#^/beca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_beca_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'beca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::deleteAction',));
            }
            not_beca_delete:

            // beca_imprimir
            if ($pathinfo === '/beca/imprimir') {
                return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaController::mypdfAction',  '_route' => 'beca_imprimir',);
            }

            if (0 === strpos($pathinfo, '/becadobeca')) {
                // becadobeca
                if (rtrim($pathinfo, '/') === '/becadobeca') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'becadobeca');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::indexAction',  '_route' => 'becadobeca',);
                }

                // becadobeca_show
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::showAction',));
                }

                // becadobeca_new
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/new$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_new')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::newAction',));
                }

                // becadobeca_create
                if ($pathinfo === '/becadobeca/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_becadobeca_create;
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::createAction',  '_route' => 'becadobeca_create',);
                }
                not_becadobeca_create:

                // becadobeca_edit
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::editAction',));
                }

                // becadobeca_update
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_becadobeca_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::updateAction',));
                }
                not_becadobeca_update:

                // becadobeca_delete
                if (preg_match('#^/becadobeca/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_becadobeca_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becadobeca_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecadoBecaController::deleteAction',));
                }
                not_becadobeca_delete:

            }

            if (0 === strpos($pathinfo, '/becavulnerable')) {
                // becavulnerable
                if (rtrim($pathinfo, '/') === '/becavulnerable') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'becavulnerable');
                    }

                    return array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::indexAction',  '_route' => 'becavulnerable',);
                }

                // becavulnerable_show
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_show')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::showAction',));
                }

                // becavulnerable_new
                if (preg_match('#^/becavulnerable/(?P<becado>[^/]++)/new$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_new')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::newAction',));
                }

                // becavulnerable_create
                if (preg_match('#^/becavulnerable/(?P<becado>[^/]++)/create$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_becavulnerable_create;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_create')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::createAction',));
                }
                not_becavulnerable_create:

                // becavulnerable_edit
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_edit')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::editAction',));
                }

                // becavulnerable_update
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_becavulnerable_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_update')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::updateAction',));
                }
                not_becavulnerable_update:

                // becavulnerable_delete
                if (preg_match('#^/becavulnerable/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_becavulnerable_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'becavulnerable_delete')), array (  '_controller' => 'BecasMds\\BecaBundle\\Controller\\BecaVulnerableController::deleteAction',));
                }
                not_becavulnerable_delete:

            }

        }

        // formacion_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_homepage')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/primario')) {
            // primario
            if (rtrim($pathinfo, '/') === '/primario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'primario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::indexAction',  '_route' => 'primario',);
            }

            // primario_show
            if (preg_match('#^/primario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::showAction',));
            }

            // primario_new
            if ($pathinfo === '/primario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::newAction',  '_route' => 'primario_new',);
            }

            // primario_create
            if ($pathinfo === '/primario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_primario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::createAction',  '_route' => 'primario_create',);
            }
            not_primario_create:

            // primario_edit
            if (preg_match('#^/primario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::editAction',));
            }

            // primario_update
            if (preg_match('#^/primario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_primario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::updateAction',));
            }
            not_primario_update:

            // primario_delete
            if (preg_match('#^/primario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_primario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'primario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PrimarioController::deleteAction',));
            }
            not_primario_delete:

        }

        if (0 === strpos($pathinfo, '/secundario')) {
            // secundario
            if (rtrim($pathinfo, '/') === '/secundario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'secundario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::indexAction',  '_route' => 'secundario',);
            }

            // secundario_show
            if (preg_match('#^/secundario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::showAction',));
            }

            // secundario_new
            if ($pathinfo === '/secundario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::newAction',  '_route' => 'secundario_new',);
            }

            // secundario_create
            if ($pathinfo === '/secundario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_secundario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::createAction',  '_route' => 'secundario_create',);
            }
            not_secundario_create:

            // secundario_edit
            if (preg_match('#^/secundario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::editAction',));
            }

            // secundario_update
            if (preg_match('#^/secundario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_secundario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::updateAction',));
            }
            not_secundario_update:

            // secundario_delete
            if (preg_match('#^/secundario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_secundario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'secundario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\SecundarioController::deleteAction',));
            }
            not_secundario_delete:

        }

        if (0 === strpos($pathinfo, '/terciario')) {
            // terciario
            if (rtrim($pathinfo, '/') === '/terciario') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'terciario');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::indexAction',  '_route' => 'terciario',);
            }

            // terciario_show
            if (preg_match('#^/terciario/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::showAction',));
            }

            // terciario_new
            if ($pathinfo === '/terciario/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::newAction',  '_route' => 'terciario_new',);
            }

            // terciario_create
            if ($pathinfo === '/terciario/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_terciario_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::createAction',  '_route' => 'terciario_create',);
            }
            not_terciario_create:

            // terciario_edit
            if (preg_match('#^/terciario/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::editAction',));
            }

            // terciario_update
            if (preg_match('#^/terciario/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_terciario_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::updateAction',));
            }
            not_terciario_update:

            // terciario_delete
            if (preg_match('#^/terciario/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_terciario_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'terciario_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\TerciarioController::deleteAction',));
            }
            not_terciario_delete:

        }

        if (0 === strpos($pathinfo, '/universidad')) {
            // universidad
            if (rtrim($pathinfo, '/') === '/universidad') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'universidad');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::indexAction',  '_route' => 'universidad',);
            }

            // universidad_show
            if (preg_match('#^/universidad/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::showAction',));
            }

            // universidad_new
            if ($pathinfo === '/universidad/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::newAction',  '_route' => 'universidad_new',);
            }

            // universidad_create
            if ($pathinfo === '/universidad/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_universidad_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::createAction',  '_route' => 'universidad_create',);
            }
            not_universidad_create:

            // universidad_edit
            if (preg_match('#^/universidad/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::editAction',));
            }

            // universidad_update
            if (preg_match('#^/universidad/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_universidad_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::updateAction',));
            }
            not_universidad_update:

            // universidad_delete
            if (preg_match('#^/universidad/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_universidad_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'universidad_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\UniversidadController::deleteAction',));
            }
            not_universidad_delete:

        }

        if (0 === strpos($pathinfo, '/formacion')) {
            // formacion
            if (rtrim($pathinfo, '/') === '/formacion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'formacion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::indexAction',  '_route' => 'formacion',);
            }

            // formacion_show
            if (preg_match('#^/formacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::showAction',));
            }

            // formacion_new
            if ($pathinfo === '/formacion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::newAction',  '_route' => 'formacion_new',);
            }

            // formacion_create
            if ($pathinfo === '/formacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_formacion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::createAction',  '_route' => 'formacion_create',);
            }
            not_formacion_create:

            // formacion_edit
            if (preg_match('#^/formacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::editAction',));
            }

            // formacion_update
            if (preg_match('#^/formacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_formacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::updateAction',));
            }
            not_formacion_update:

            // formacion_delete
            if (preg_match('#^/formacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_formacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'formacion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\FormacionController::deleteAction',));
            }
            not_formacion_delete:

        }

        if (0 === strpos($pathinfo, '/profesion')) {
            // profesion
            if (rtrim($pathinfo, '/') === '/profesion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'profesion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::indexAction',  '_route' => 'profesion',);
            }

            // profesion_show
            if (preg_match('#^/profesion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::showAction',));
            }

            // profesion_new
            if ($pathinfo === '/profesion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::newAction',  '_route' => 'profesion_new',);
            }

            // profesion_create
            if ($pathinfo === '/profesion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_profesion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::createAction',  '_route' => 'profesion_create',);
            }
            not_profesion_create:

            // profesion_edit
            if (preg_match('#^/profesion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::editAction',));
            }

            // profesion_update
            if (preg_match('#^/profesion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_profesion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::updateAction',));
            }
            not_profesion_update:

            // profesion_delete
            if (preg_match('#^/profesion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_profesion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'profesion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\ProfesionController::deleteAction',));
            }
            not_profesion_delete:

        }

        if (0 === strpos($pathinfo, '/niveleducativo')) {
            // niveleducativo
            if (rtrim($pathinfo, '/') === '/niveleducativo') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'niveleducativo');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::indexAction',  '_route' => 'niveleducativo',);
            }

            // niveleducativo_show
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::showAction',));
            }

            // niveleducativo_new
            if ($pathinfo === '/niveleducativo/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::newAction',  '_route' => 'niveleducativo_new',);
            }

            // niveleducativo_create
            if ($pathinfo === '/niveleducativo/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_niveleducativo_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::createAction',  '_route' => 'niveleducativo_create',);
            }
            not_niveleducativo_create:

            // niveleducativo_edit
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::editAction',));
            }

            // niveleducativo_update
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_niveleducativo_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::updateAction',));
            }
            not_niveleducativo_update:

            // niveleducativo_delete
            if (preg_match('#^/niveleducativo/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_niveleducativo_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'niveleducativo_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\NivelEducativoController::deleteAction',));
            }
            not_niveleducativo_delete:

        }

        if (0 === strpos($pathinfo, '/institucion')) {
            // institucion
            if (rtrim($pathinfo, '/') === '/institucion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'institucion');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::indexAction',  '_route' => 'institucion',);
            }

            // institucion_show
            if (preg_match('#^/institucion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::showAction',));
            }

            // institucion_new
            if ($pathinfo === '/institucion/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::newAction',  '_route' => 'institucion_new',);
            }

            // institucion_create
            if ($pathinfo === '/institucion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_institucion_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::createAction',  '_route' => 'institucion_create',);
            }
            not_institucion_create:

            // institucion_edit
            if (preg_match('#^/institucion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::editAction',));
            }

            // institucion_update
            if (preg_match('#^/institucion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_institucion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::updateAction',));
            }
            not_institucion_update:

            // institucion_delete
            if (preg_match('#^/institucion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_institucion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'institucion_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\InstitucionController::deleteAction',));
            }
            not_institucion_delete:

        }

        if (0 === strpos($pathinfo, '/perfil')) {
            // perfil
            if (rtrim($pathinfo, '/') === '/perfil') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'perfil');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::indexAction',  '_route' => 'perfil',);
            }

            // perfil_show
            if (preg_match('#^/perfil/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::showAction',));
            }

            // perfil_new
            if ($pathinfo === '/perfil/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::newAction',  '_route' => 'perfil_new',);
            }

            // perfil_create
            if ($pathinfo === '/perfil/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_perfil_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::createAction',  '_route' => 'perfil_create',);
            }
            not_perfil_create:

            // perfil_edit
            if (preg_match('#^/perfil/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::editAction',));
            }

            // perfil_update
            if (preg_match('#^/perfil/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_perfil_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::updateAction',));
            }
            not_perfil_update:

            // perfil_delete
            if (preg_match('#^/perfil/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_perfil_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'perfil_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\PerfilController::deleteAction',));
            }
            not_perfil_delete:

        }

        if (0 === strpos($pathinfo, '/oficio')) {
            // oficio
            if (rtrim($pathinfo, '/') === '/oficio') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'oficio');
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::indexAction',  '_route' => 'oficio',);
            }

            // oficio_show
            if (preg_match('#^/oficio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_show')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::showAction',));
            }

            // oficio_new
            if ($pathinfo === '/oficio/new') {
                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::newAction',  '_route' => 'oficio_new',);
            }

            // oficio_create
            if ($pathinfo === '/oficio/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_oficio_create;
                }

                return array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::createAction',  '_route' => 'oficio_create',);
            }
            not_oficio_create:

            // oficio_edit
            if (preg_match('#^/oficio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_edit')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::editAction',));
            }

            // oficio_update
            if (preg_match('#^/oficio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_oficio_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_update')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::updateAction',));
            }
            not_oficio_update:

            // oficio_delete
            if (preg_match('#^/oficio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_oficio_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'oficio_delete')), array (  '_controller' => 'BecasMds\\FormacionBundle\\Controller\\OficioController::deleteAction',));
            }
            not_oficio_delete:

        }

        // persona_homepage
        if (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'persona_homepage')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DefaultController::indexAction',));
        }

        if (0 === strpos($pathinfo, '/calle')) {
            // calle
            if (rtrim($pathinfo, '/') === '/calle') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calle');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::indexAction',  '_route' => 'calle',);
            }

            // calle_show
            if (preg_match('#^/calle/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::showAction',));
            }

            // calle_new
            if ($pathinfo === '/calle/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::newAction',  '_route' => 'calle_new',);
            }

            // calle_create
            if ($pathinfo === '/calle/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_calle_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::createAction',  '_route' => 'calle_create',);
            }
            not_calle_create:

            // calle_edit
            if (preg_match('#^/calle/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::editAction',));
            }

            // calle_update
            if (preg_match('#^/calle/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_calle_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::updateAction',));
            }
            not_calle_update:

            // calle_delete
            if (preg_match('#^/calle/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_calle_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calle_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\CalleController::deleteAction',));
            }
            not_calle_delete:

        }

        if (0 === strpos($pathinfo, '/barrio')) {
            // barrio
            if (rtrim($pathinfo, '/') === '/barrio') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'barrio');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::indexAction',  '_route' => 'barrio',);
            }

            // barrio_show
            if (preg_match('#^/barrio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::showAction',));
            }

            // barrio_new
            if ($pathinfo === '/barrio/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::newAction',  '_route' => 'barrio_new',);
            }

            // barrio_create
            if ($pathinfo === '/barrio/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_barrio_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::createAction',  '_route' => 'barrio_create',);
            }
            not_barrio_create:

            // barrio_edit
            if (preg_match('#^/barrio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::editAction',));
            }

            // barrio_update
            if (preg_match('#^/barrio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_barrio_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::updateAction',));
            }
            not_barrio_update:

            // barrio_delete
            if (preg_match('#^/barrio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_barrio_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'barrio_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BarrioController::deleteAction',));
            }
            not_barrio_delete:

        }

        if (0 === strpos($pathinfo, '/localidad')) {
            // localidad
            if (rtrim($pathinfo, '/') === '/localidad') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'localidad');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::indexAction',  '_route' => 'localidad',);
            }

            // localidad_show
            if (preg_match('#^/localidad/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::showAction',));
            }

            // localidad_new
            if ($pathinfo === '/localidad/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::newAction',  '_route' => 'localidad_new',);
            }

            // localidad_create
            if ($pathinfo === '/localidad/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_localidad_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::createAction',  '_route' => 'localidad_create',);
            }
            not_localidad_create:

            // localidad_edit
            if (preg_match('#^/localidad/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::editAction',));
            }

            // localidad_update
            if (preg_match('#^/localidad/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_localidad_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::updateAction',));
            }
            not_localidad_update:

            // localidad_delete
            if (preg_match('#^/localidad/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_localidad_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::deleteAction',));
            }
            not_localidad_delete:

            // localidad_ajax
            if ($pathinfo === '/localidad/localidadajax') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::localidadAjaxAction',  '_route' => 'localidad_ajax',);
            }

            // localidad_id_ajax
            if (0 === strpos($pathinfo, '/localidad/getlocalidad') && preg_match('#^/localidad/getlocalidad/(?P<ids>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'localidad_id_ajax')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LocalidadController::localidadIdAjaxAction',));
            }

        }

        if (0 === strpos($pathinfo, '/departamento')) {
            // departamento
            if (rtrim($pathinfo, '/') === '/departamento') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'departamento');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::indexAction',  '_route' => 'departamento',);
            }

            // departamento_show
            if (preg_match('#^/departamento/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::showAction',));
            }

            // departamento_new
            if ($pathinfo === '/departamento/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::newAction',  '_route' => 'departamento_new',);
            }

            // departamento_create
            if ($pathinfo === '/departamento/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_departamento_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::createAction',  '_route' => 'departamento_create',);
            }
            not_departamento_create:

            // departamento_edit
            if (preg_match('#^/departamento/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::editAction',));
            }

            // departamento_update
            if (preg_match('#^/departamento/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_departamento_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::updateAction',));
            }
            not_departamento_update:

            // departamento_delete
            if (preg_match('#^/departamento/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_departamento_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'departamento_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DepartamentoController::deleteAction',));
            }
            not_departamento_delete:

        }

        if (0 === strpos($pathinfo, '/referente')) {
            // referente
            if (rtrim($pathinfo, '/') === '/referente') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'referente');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::indexAction',  '_route' => 'referente',);
            }

            // referente_show
            if (preg_match('#^/referente/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::showAction',));
            }

            // referente_new
            if ($pathinfo === '/referente/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::newAction',  '_route' => 'referente_new',);
            }

            // referente_create
            if ($pathinfo === '/referente/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_referente_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::createAction',  '_route' => 'referente_create',);
            }
            not_referente_create:

            // referente_edit
            if (preg_match('#^/referente/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::editAction',));
            }

            // referente_update
            if (preg_match('#^/referente/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_referente_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::updateAction',));
            }
            not_referente_update:

            // referente_delete
            if (preg_match('#^/referente/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_referente_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'referente_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::deleteAction',));
            }
            not_referente_delete:

        }

        if (0 === strpos($pathinfo, '/movimientosocial')) {
            // movimientosocial
            if (rtrim($pathinfo, '/') === '/movimientosocial') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'movimientosocial');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::indexAction',  '_route' => 'movimientosocial',);
            }

            // movimientosocial_show
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::showAction',));
            }

            // movimientosocial_new
            if ($pathinfo === '/movimientosocial/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::newAction',  '_route' => 'movimientosocial_new',);
            }

            // movimientosocial_create
            if ($pathinfo === '/movimientosocial/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_movimientosocial_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::createAction',  '_route' => 'movimientosocial_create',);
            }
            not_movimientosocial_create:

            // movimientosocial_edit
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::editAction',));
            }

            // movimientosocial_update
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_movimientosocial_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::updateAction',));
            }
            not_movimientosocial_update:

            // movimientosocial_delete
            if (preg_match('#^/movimientosocial/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_movimientosocial_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'movimientosocial_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\MovimientoSocialController::deleteAction',));
            }
            not_movimientosocial_delete:

        }

        if (0 === strpos($pathinfo, '/responsable')) {
            // responsable
            if (rtrim($pathinfo, '/') === '/responsable') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'responsable');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::indexAction',  '_route' => 'responsable',);
            }

            // responsable_show
            if (preg_match('#^/responsable/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::showAction',));
            }

            // responsable_new
            if ($pathinfo === '/responsable/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::newAction',  '_route' => 'responsable_new',);
            }

            // responsable_create
            if ($pathinfo === '/responsable/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_responsable_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::createAction',  '_route' => 'responsable_create',);
            }
            not_responsable_create:

            // responsable_edit
            if (preg_match('#^/responsable/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::editAction',));
            }

            // responsable_update
            if (preg_match('#^/responsable/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_responsable_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::updateAction',));
            }
            not_responsable_update:

            // responsable_delete
            if (preg_match('#^/responsable/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_responsable_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'responsable_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ResponsableController::deleteAction',));
            }
            not_responsable_delete:

        }

        if (0 === strpos($pathinfo, '/d')) {
            if (0 === strpos($pathinfo, '/dependencia')) {
                // dependencia
                if (rtrim($pathinfo, '/') === '/dependencia') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'dependencia');
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::indexAction',  '_route' => 'dependencia',);
                }

                // dependencia_show
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::showAction',));
                }

                // dependencia_new
                if ($pathinfo === '/dependencia/new') {
                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::newAction',  '_route' => 'dependencia_new',);
                }

                // dependencia_create
                if ($pathinfo === '/dependencia/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_dependencia_create;
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::createAction',  '_route' => 'dependencia_create',);
                }
                not_dependencia_create:

                // dependencia_edit
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::editAction',));
                }

                // dependencia_update
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_dependencia_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::updateAction',));
                }
                not_dependencia_update:

                // dependencia_delete
                if (preg_match('#^/dependencia/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_dependencia_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'dependencia_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DependenciaController::deleteAction',));
                }
                not_dependencia_delete:

            }

            if (0 === strpos($pathinfo, '/domicilio')) {
                // domicilio
                if (rtrim($pathinfo, '/') === '/domicilio') {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'domicilio');
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::indexAction',  '_route' => 'domicilio',);
                }

                // domicilio_show
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::showAction',));
                }

                // domicilio_new
                if ($pathinfo === '/domicilio/new') {
                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::newAction',  '_route' => 'domicilio_new',);
                }

                // domicilio_create
                if ($pathinfo === '/domicilio/create') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_domicilio_create;
                    }

                    return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::createAction',  '_route' => 'domicilio_create',);
                }
                not_domicilio_create:

                // domicilio_edit
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::editAction',));
                }

                // domicilio_update
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                        $allow = array_merge($allow, array('POST', 'PUT'));
                        goto not_domicilio_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::updateAction',));
                }
                not_domicilio_update:

                // domicilio_delete
                if (preg_match('#^/domicilio/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('POST', 'DELETE'));
                        goto not_domicilio_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'domicilio_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\DomicilioController::deleteAction',));
                }
                not_domicilio_delete:

            }

        }

        // find_objects
        if ($pathinfo === '/findreferente') {
            return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::findReferenteAction',  '_route' => 'find_objects',);
        }

        // get_objects
        if (0 === strpos($pathinfo, '/getreferente') && preg_match('#^/getreferente/(?P<ids>[^/]++)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'get_objects')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\ReferenteController::getReferenteAction',));
        }

        if (0 === strpos($pathinfo, '/becado')) {
            // becado
            if (rtrim($pathinfo, '/') === '/becado') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'becado');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::indexAction',  '_route' => 'becado',);
            }

            // becado_show
            if (preg_match('#^/becado/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::showAction',));
            }

            // becado_new
            if ($pathinfo === '/becado/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::newAction',  '_route' => 'becado_new',);
            }

            // becado_create
            if ($pathinfo === '/becado/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_becado_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::createAction',  '_route' => 'becado_create',);
            }
            not_becado_create:

            // becado_edit
            if (preg_match('#^/becado/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::editAction',));
            }

            // becado_update
            if (preg_match('#^/becado/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_becado_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::updateAction',));
            }
            not_becado_update:

            // becado_delete
            if (preg_match('#^/becado/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_becado_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'becado_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::deleteAction',));
            }
            not_becado_delete:

            // ajax_dni
            if (preg_match('#^/becado/(?P<dni>[^/]++)/ajaxdni$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'ajax_dni')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\BecadoController::ajaxDniAction',));
            }

        }

        if (0 === strpos($pathinfo, '/lugarafectacion')) {
            // lugarafectacion
            if (rtrim($pathinfo, '/') === '/lugarafectacion') {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'lugarafectacion');
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::indexAction',  '_route' => 'lugarafectacion',);
            }

            // lugarafectacion_show
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/show$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_show')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::showAction',));
            }

            // lugarafectacion_new
            if ($pathinfo === '/lugarafectacion/new') {
                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::newAction',  '_route' => 'lugarafectacion_new',);
            }

            // lugarafectacion_create
            if ($pathinfo === '/lugarafectacion/create') {
                if ($this->context->getMethod() != 'POST') {
                    $allow[] = 'POST';
                    goto not_lugarafectacion_create;
                }

                return array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::createAction',  '_route' => 'lugarafectacion_create',);
            }
            not_lugarafectacion_create:

            // lugarafectacion_edit
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_edit')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::editAction',));
            }

            // lugarafectacion_update
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/update$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'PUT'))) {
                    $allow = array_merge($allow, array('POST', 'PUT'));
                    goto not_lugarafectacion_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_update')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::updateAction',));
            }
            not_lugarafectacion_update:

            // lugarafectacion_delete
            if (preg_match('#^/lugarafectacion/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('POST', 'DELETE'))) {
                    $allow = array_merge($allow, array('POST', 'DELETE'));
                    goto not_lugarafectacion_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'lugarafectacion_delete')), array (  '_controller' => 'BecasMds\\PersonaBundle\\Controller\\LugarAfectacionController::deleteAction',));
            }
            not_lugarafectacion_delete:

        }

        // fos_js_routing_js
        if (0 === strpos($pathinfo, '/js/routing') && preg_match('#^/js/routing(?:\\.(?P<_format>js|json))?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_js_routing_js')), array (  '_controller' => 'fos_js_routing.controller:indexAction',  '_format' => 'js',));
        }

        if (0 === strpos($pathinfo, '/shtumi_')) {
            // shtumi_ajaxautocomplete
            if ($pathinfo === '/shtumi_ajaxautocomplete') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\AjaxAutocompleteJSONController::getJSONAction',  '_route' => 'shtumi_ajaxautocomplete',);
            }

            // shtumi_select2_entity
            if ($pathinfo === '/shtumi_select2_entity') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\Select2EntityController::getJSONAction',  '_route' => 'shtumi_select2_entity',);
            }

            // shtumi_ajaxfileupload
            if ($pathinfo === '/shtumi_ajaxfileupload') {
                return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\AjaxFileController::uploadAction',  '_route' => 'shtumi_ajaxfileupload',);
            }

            if (0 === strpos($pathinfo, '/shtumi_dependent_filtered_')) {
                // shtumi_dependent_filtered_entity
                if ($pathinfo === '/shtumi_dependent_filtered_entity') {
                    return array (  '_controller' => 'ShtumiUsefulBundle:DependentFilteredEntity:getOptions',  '_route' => 'shtumi_dependent_filtered_entity',);
                }

                // shtumi_dependent_filtered_select2
                if ($pathinfo === '/shtumi_dependent_filtered_select2') {
                    return array (  '_controller' => 'Shtumi\\UsefulBundle\\Controller\\DependentFilteredEntityController::getJsonAction',  '_route' => 'shtumi_dependent_filtered_select2',);
                }

            }

        }

        if (0 === strpos($pathinfo, '/log')) {
            if (0 === strpos($pathinfo, '/login')) {
                // fos_user_security_login
                if ($pathinfo === '/login') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_security_login;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  '_route' => 'fos_user_security_login',);
                }
                not_fos_user_security_login:

                // fos_user_security_check
                if ($pathinfo === '/login_check') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_security_check;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  '_route' => 'fos_user_security_check',);
                }
                not_fos_user_security_check:

            }

            // fos_user_security_logout
            if ($pathinfo === '/logout') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_security_logout;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  '_route' => 'fos_user_security_logout',);
            }
            not_fos_user_security_logout:

        }

        if (0 === strpos($pathinfo, '/profile')) {
            // fos_user_profile_show
            if (rtrim($pathinfo, '/') === '/profile') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_profile_show;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fos_user_profile_show');
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  '_route' => 'fos_user_profile_show',);
            }
            not_fos_user_profile_show:

            // fos_user_profile_edit
            if ($pathinfo === '/profile/edit') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_fos_user_profile_edit;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  '_route' => 'fos_user_profile_edit',);
            }
            not_fos_user_profile_edit:

        }

        if (0 === strpos($pathinfo, '/re')) {
            if (0 === strpos($pathinfo, '/register')) {
                // fos_user_registration_register
                if (rtrim($pathinfo, '/') === '/register') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_registration_register;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fos_user_registration_register');
                    }

                    return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::registerAction',  '_route' => 'fos_user_registration_register',);
                }
                not_fos_user_registration_register:

                if (0 === strpos($pathinfo, '/register/c')) {
                    // fos_user_registration_check_email
                    if ($pathinfo === '/register/check-email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_registration_check_email;
                        }

                        return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::checkEmailAction',  '_route' => 'fos_user_registration_check_email',);
                    }
                    not_fos_user_registration_check_email:

                    if (0 === strpos($pathinfo, '/register/confirm')) {
                        // fos_user_registration_confirm
                        if (preg_match('#^/register/confirm/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirm;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_registration_confirm')), array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::confirmAction',));
                        }
                        not_fos_user_registration_confirm:

                        // fos_user_registration_confirmed
                        if ($pathinfo === '/register/confirmed') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirmed;
                            }

                            return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\RegistrationController::confirmedAction',  '_route' => 'fos_user_registration_confirmed',);
                        }
                        not_fos_user_registration_confirmed:

                    }

                }

            }

            if (0 === strpos($pathinfo, '/resetting')) {
                // fos_user_resetting_request
                if ($pathinfo === '/resetting/request') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_request;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  '_route' => 'fos_user_resetting_request',);
                }
                not_fos_user_resetting_request:

                // fos_user_resetting_send_email
                if ($pathinfo === '/resetting/send-email') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_resetting_send_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  '_route' => 'fos_user_resetting_send_email',);
                }
                not_fos_user_resetting_send_email:

                // fos_user_resetting_check_email
                if ($pathinfo === '/resetting/check-email') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_check_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  '_route' => 'fos_user_resetting_check_email',);
                }
                not_fos_user_resetting_check_email:

                // fos_user_resetting_reset
                if (0 === strpos($pathinfo, '/resetting/reset') && preg_match('#^/resetting/reset/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_resetting_reset;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_resetting_reset')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',));
                }
                not_fos_user_resetting_reset:

            }

        }

        // fos_user_change_password
        if ($pathinfo === '/profile/change-password') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_fos_user_change_password;
            }

            return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  '_route' => 'fos_user_change_password',);
        }
        not_fos_user_change_password:

        // inicio
        if (rtrim($pathinfo, '/') === '') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'inicio');
            }

            return array (  '_controller' => 'BecasMds\\UsuarioBundle\\Controller\\DefaultController::indexAction',  '_route' => 'inicio',);
        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
";}i:1;a:2:{i:0;s:5:"array";i:1;a:205:{i:0;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:1;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:2;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:3;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:4;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:5;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:6;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:7;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:8;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:9;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:10;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:11;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:12;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:13;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:14;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:15;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:16;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:17;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:18;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:19;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:20;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:21;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:22;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:23;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:24;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:25;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:26;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:27;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:28;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:29;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:30;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:31;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:32;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:33;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:34;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:35;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:36;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:37;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:38;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:39;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:40;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:41;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:42;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:43;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:44;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:45;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:46;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:47;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:48;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:49;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:50;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:51;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:52;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:53;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:54;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:55;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:56;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:57;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:58;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:59;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:60;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:61;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:62;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:63;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:64;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:65;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:66;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:67;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:68;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:69;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:70;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:71;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:72;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:73;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:74;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:75;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:76;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:77;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:78;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:79;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:80;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:81;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:82;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:83;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:84;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:85;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:86;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:87;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:88;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:89;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:90;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:91;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:92;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:93;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:94;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:95;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:96;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:97;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:98;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:99;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:100;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:101;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:102;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:103;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:104;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:105;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:106;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:107;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:108;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:109;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:110;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:111;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:112;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:113;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:114;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:115;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:116;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:117;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:118;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:119;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:120;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:121;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:122;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:123;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:124;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:125;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:126;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:127;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:128;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:129;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:130;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:131;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:132;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:133;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:134;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:135;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:136;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:137;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:138;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:139;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:140;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:141;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:142;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:143;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:144;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:145;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:146;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:147;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:148;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:149;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:150;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:151;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:152;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:153;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:154;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:155;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:156;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:157;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:158;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Bundle\AsseticBundle\Config\AsseticResource";}i:159;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:160;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:161;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:162;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:163;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:164;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:165;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:166;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:167;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:168;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:169;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:170;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:171;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:172;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:173;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:174;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:175;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:176;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:177;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:178;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:179;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:180;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:181;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:182;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:183;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:184;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:185;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:186;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:187;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:188;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:189;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:190;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:191;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:192;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:193;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:194;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:195;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:196;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:197;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:198;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:199;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:200;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:201;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:202;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:203;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}i:204;a:2:{i:0;s:6:"object";i:1;s:46:"Symfony\Component\Config\Resource\FileResource";}}}}}i:4;a:8:{s:9:"namespace";s:25:"Symfony\Component\Routing";s:11:"short_class";s:6:"Router";s:5:"class";s:32:"Symfony\Component\Routing\Router";s:4:"type";s:2:"->";s:8:"function";s:10:"getMatcher";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1227;s:4:"args";a:0:{}}i:5;a:8:{s:9:"namespace";s:25:"Symfony\Component\Routing";s:11:"short_class";s:6:"Router";s:5:"class";s:32:"Symfony\Component\Routing\Router";s:4:"type";s:2:"->";s:8:"function";s:5:"match";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1886;s:4:"args";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:33:"/shtumi_dependent_filtered_entity";}}}i:6;a:8:{s:9:"namespace";s:42:"Symfony\Component\HttpKernel\EventListener";s:11:"short_class";s:14:"RouterListener";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:4:"type";s:2:"->";s:8:"function";s:15:"onKernelRequest";s:4:"file";N;s:4:"line";N;s:4:"args";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:7;a:8:{s:9:"namespace";s:0:"";s:11:"short_class";s:0:"";s:5:"class";s:0:"";s:4:"type";s:0:"";s:8:"function";s:14:"call_user_func";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher.php";s:4:"line";i:476;s:4:"args";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;a:2:{i:0;a:2:{i:0;s:6:"object";i:1;s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";}i:1;a:2:{i:0;s:6:"string";i:1;s:15:"onKernelRequest";}}}i:1;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:8;a:8:{s:9:"namespace";s:34:"Symfony\Component\HttpKernel\Debug";s:11:"short_class";s:24:"TraceableEventDispatcher";s:5:"class";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";s:4:"type";s:2:"->";s:8:"function";s:44:"Symfony\Component\HttpKernel\Debug\{closure}";s:4:"file";N;s:4:"line";N;s:4:"args";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:9;a:8:{s:9:"namespace";s:0:"";s:11:"short_class";s:0:"";s:5:"class";s:0:"";s:4:"type";s:0:"";s:8:"function";s:14:"call_user_func";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1691;s:4:"args";a:2:{i:0;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:1;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:10;a:8:{s:9:"namespace";s:33:"Symfony\Component\EventDispatcher";s:11:"short_class";s:15:"EventDispatcher";s:5:"class";s:49:"Symfony\Component\EventDispatcher\EventDispatcher";s:4:"type";s:2:"->";s:8:"function";s:10:"doDispatch";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1617;s:4:"args";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;a:9:{i:0;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:1;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:2;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:3;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:4;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:5;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:6;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:7;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}i:8;a:2:{i:0;s:6:"object";i:1;s:7:"Closure";}}}i:1;a:2:{i:0;s:6:"string";i:1;s:14:"kernel.request";}i:2;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:11;a:8:{s:9:"namespace";s:33:"Symfony\Component\EventDispatcher";s:11:"short_class";s:15:"EventDispatcher";s:5:"class";s:49:"Symfony\Component\EventDispatcher\EventDispatcher";s:4:"type";s:2:"->";s:8:"function";s:8:"dispatch";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher.php";s:4:"line";i:155;s:4:"args";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"kernel.request";}i:1;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:12;a:8:{s:9:"namespace";s:34:"Symfony\Component\HttpKernel\Debug";s:11:"short_class";s:24:"TraceableEventDispatcher";s:5:"class";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";s:4:"type";s:2:"->";s:8:"function";s:8:"dispatch";s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:2963;s:4:"args";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"kernel.request";}i:1;a:2:{i:0;s:6:"object";i:1;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}}}i:13;a:8:{s:9:"namespace";s:28:"Symfony\Component\HttpKernel";s:11:"short_class";s:10:"HttpKernel";s:5:"class";s:39:"Symfony\Component\HttpKernel\HttpKernel";s:4:"type";s:2:"->";s:8:"function";s:9:"handleRaw";s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:2948;s:4:"args";a:2:{i:0;a:2:{i:0;s:6:"object";i:1;s:40:"Symfony\Component\HttpFoundation\Request";}i:1;a:2:{i:0;s:6:"string";i:1;s:1:"1";}}}i:14;a:8:{s:9:"namespace";s:28:"Symfony\Component\HttpKernel";s:11:"short_class";s:10:"HttpKernel";s:5:"class";s:39:"Symfony\Component\HttpKernel\HttpKernel";s:4:"type";s:2:"->";s:8:"function";s:6:"handle";s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:3077;s:4:"args";a:3:{i:0;a:2:{i:0;s:6:"object";i:1;s:40:"Symfony\Component\HttpFoundation\Request";}i:1;a:2:{i:0;s:6:"string";i:1;s:1:"1";}i:2;a:2:{i:0;s:7:"boolean";i:1;b:1;}}}i:15;a:8:{s:9:"namespace";s:48:"Symfony\Component\HttpKernel\DependencyInjection";s:11:"short_class";s:24:"ContainerAwareHttpKernel";s:5:"class";s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";s:4:"type";s:2:"->";s:8:"function";s:6:"handle";s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:2347;s:4:"args";a:3:{i:0;a:2:{i:0;s:6:"object";i:1;s:40:"Symfony\Component\HttpFoundation\Request";}i:1;a:2:{i:0;s:6:"string";i:1;s:1:"1";}i:2;a:2:{i:0;s:7:"boolean";i:1;b:1;}}}i:16;a:8:{s:9:"namespace";s:28:"Symfony\Component\HttpKernel";s:11:"short_class";s:6:"Kernel";s:5:"class";s:35:"Symfony\Component\HttpKernel\Kernel";s:4:"type";s:2:"->";s:8:"function";s:6:"handle";s:4:"file";s:40:"C:\xampp\htdocs\BecasMds\web\app_dev.php";s:4:"line";i:28;s:4:"args";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:40:"Symfony\Component\HttpFoundation\Request";}}}}s:57:" Symfony\Component\Debug\Exception\FlattenException class";s:50:"Symfony\Component\Filesystem\Exception\IOException";s:62:" Symfony\Component\Debug\Exception\FlattenException statusCode";i:500;s:59:" Symfony\Component\Debug\Exception\FlattenException headers";a:0:{}s:56:" Symfony\Component\Debug\Exception\FlattenException file";s:95:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\Filesystem\Filesystem.php";s:56:" Symfony\Component\Debug\Exception\FlattenException line";i:264;s:64:" Symfony\Component\HttpKernel\Exception\FlattenException handler";N;}}}s:6:"events";C:61:"Symfony\Component\HttpKernel\DataCollector\EventDataCollector":58423:{a:2:{s:16:"called_listeners";a:26:{s:91:"kernel.request.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\ProfilerListener.php";s:4:"line";i:72;s:6:"pretty";s:76:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest";}s:92:"kernel.request.Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:23;s:6:"pretty";s:77:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest";}s:91:"kernel.request.Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\FragmentListener.php";s:4:"line";i:57;s:6:"pretty";s:76:"Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest";}s:89:"kernel.request.Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1875;s:6:"pretty";s:74:"Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest";}s:95:"kernel.exception.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelException";a:7:{s:5:"event";s:16:"kernel.exception";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:17:"onKernelException";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\ProfilerListener.php";s:4:"line";i:63;s:6:"pretty";s:78:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelException";}s:96:"kernel.exception.Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException";a:7:{s:5:"event";s:16:"kernel.exception";s:4:"type";s:6:"Method";s:5:"class";s:60:"Symfony\Component\HttpKernel\EventListener\ExceptionListener";s:6:"method";s:17:"onKernelException";s:4:"file";s:116:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\ExceptionListener.php";s:4:"line";i:39;s:6:"pretty";s:79:"Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException";}s:22:"kernel.request.closure";a:3:{s:5:"event";s:14:"kernel.request";s:4:"type";s:7:"Closure";s:6:"pretty";s:7:"closure";}s:89:"kernel.request.Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:113:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\LocaleListener.php";s:4:"line";i:51;s:6:"pretty";s:74:"Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest";}s:72:"kernel.request.Symfony\Component\Security\Http\Firewall::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:40:"Symfony\Component\Security\Http\Firewall";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:2364;s:6:"pretty";s:57:"Symfony\Component\Security\Http\Firewall::onKernelRequest";}s:90:"kernel.request.Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:117:"C:\xampp\htdocs\BecasMds\vendor\symfony\assetic-bundle\Symfony\Bundle\AsseticBundle\EventListener\RequestListener.php";s:4:"line";i:23;s:6:"pretty";s:75:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest";}s:92:"kernel.request.Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener::injectLogger";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:63:"Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener";s:6:"method";s:12:"injectLogger";s:4:"file";s:119:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener.php";s:4:"line";i:37;s:6:"pretty";s:77:"Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener::injectLogger";}s:102:"kernel.controller.Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector";s:6:"method";s:18:"onKernelController";s:4:"file";s:118:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\DataCollector\RouterDataCollector.php";s:4:"line";i:66;s:6:"pretty";s:84:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController";}s:101:"kernel.controller.Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector";s:6:"method";s:18:"onKernelController";s:4:"file";s:119:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\DataCollector\RequestDataCollector.php";s:4:"line";i:273;s:6:"pretty";s:83:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController";}s:105:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:67:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:6846;s:6:"pretty";s:87:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController";}s:109:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:71:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:6914;s:6:"pretty";s:91:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController";}s:103:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:7226;s:6:"pretty";s:85:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController";}s:79:"kernel.response.Symfony\Bridge\Monolog\Handler\FirePHPHandler::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:45:"Symfony\Bridge\Monolog\Handler\FirePHPHandler";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:101:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bridge\Monolog\Handler\FirePHPHandler.php";s:4:"line";i:39;s:6:"pretty";s:63:"Symfony\Bridge\Monolog\Handler\FirePHPHandler::onKernelResponse";}s:81:"kernel.response.Symfony\Bridge\Monolog\Handler\ChromePhpHandler::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:47:"Symfony\Bridge\Monolog\Handler\ChromePhpHandler";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:103:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bridge\Monolog\Handler\ChromePhpHandler.php";s:4:"line";i:39;s:6:"pretty";s:65:"Symfony\Bridge\Monolog\Handler\ChromePhpHandler::onKernelResponse";}s:93:"kernel.response.Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:1816;s:6:"pretty";s:77:"Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse";}s:93:"kernel.response.Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\Security\Http\RememberMe\ResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\Security\Http\RememberMe\ResponseListener.php";s:4:"line";i:29;s:6:"pretty";s:77:"Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse";}s:96:"kernel.response.Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:62:"Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:7298;s:6:"pretty";s:80:"Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener::onKernelResponse";}s:93:"kernel.response.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:115:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\ProfilerListener.php";s:4:"line";i:82;s:6:"pretty";s:77:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse";}s:104:"kernel.response.Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:70:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:126:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener.php";s:4:"line";i:54;s:6:"pretty";s:88:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse";}s:96:"kernel.response.Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:62:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:118:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\SaveSessionListener.php";s:4:"line";i:48;s:6:"pretty";s:80:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse";}s:101:"kernel.response.Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:67:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:123:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\HttpKernel\EventListener\StreamedResponseListener.php";s:4:"line";i:33;s:6:"pretty";s:85:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse";}s:96:"kernel.terminate.Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";a:7:{s:5:"event";s:16:"kernel.terminate";s:4:"type";s:6:"Method";s:5:"class";s:66:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener";s:6:"method";s:11:"onTerminate";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\symfony\swiftmailer-bundle\EventListener\EmailSenderListener.php";s:4:"line";i:46;s:6:"pretty";s:79:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";}}s:20:"not_called_listeners";a:77:{s:105:"lexik_filter.prepare.Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener::onFilterBuilderPrepare";a:7:{s:5:"event";s:20:"lexik_filter.prepare";s:4:"type";s:6:"Method";s:5:"class";s:60:"Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener";s:6:"method";s:22:"onFilterBuilderPrepare";s:4:"file";s:121:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener.php";s:4:"line";i:60;s:6:"pretty";s:84:"Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener::onFilterBuilderPrepare";}s:127:"lexik_filter.apply_filters.orm.Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener::onApplyFilterCondition";a:7:{s:5:"event";s:30:"lexik_filter.apply_filters.orm";s:4:"type";s:6:"Method";s:5:"class";s:72:"Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener";s:6:"method";s:22:"onApplyFilterCondition";s:4:"file";s:133:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener.php";s:4:"line";i:40;s:6:"pretty";s:96:"Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener::onApplyFilterCondition";}s:128:"lexik_filter.apply_filters.dbal.Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener::onApplyFilterCondition";a:7:{s:5:"event";s:31:"lexik_filter.apply_filters.dbal";s:4:"type";s:6:"Method";s:5:"class";s:72:"Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener";s:6:"method";s:22:"onApplyFilterCondition";s:4:"file";s:133:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener.php";s:4:"line";i:40;s:6:"pretty";s:96:"Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener::onApplyFilterCondition";}s:97:"console.terminate.Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";a:7:{s:5:"event";s:17:"console.terminate";s:4:"type";s:6:"Method";s:5:"class";s:66:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener";s:6:"method";s:11:"onTerminate";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\symfony\swiftmailer-bundle\EventListener\EmailSenderListener.php";s:4:"line";i:46;s:6:"pretty";s:79:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";}s:91:"kernel.view.Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelView";a:7:{s:5:"event";s:11:"kernel.view";s:4:"type";s:6:"Method";s:5:"class";s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener";s:6:"method";s:12:"onKernelView";s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:7251;s:6:"pretty";s:79:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelView";}s:126:"lexik_form_filter.apply.orm.filter_boolean.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterBoolean";a:7:{s:5:"event";s:42:"lexik_form_filter.apply.orm.filter_boolean";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:13:"filterBoolean";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:47;s:6:"pretty";s:83:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterBoolean";}s:128:"lexik_form_filter.apply.orm.filter_checkbox.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterCheckbox";a:7:{s:5:"event";s:43:"lexik_form_filter.apply.orm.filter_checkbox";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:14:"filterCheckbox";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:67;s:6:"pretty";s:84:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterCheckbox";}s:123:"lexik_form_filter.apply.orm.filter_choice.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:41:"lexik_form_filter.apply.orm.filter_choice";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:120:"lexik_form_filter.apply.orm.filter_date.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";a:7:{s:5:"event";s:39:"lexik_form_filter.apply.orm.filter_date";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";}s:131:"lexik_form_filter.apply.orm.filter_date_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateRange";a:7:{s:5:"event";s:45:"lexik_form_filter.apply.orm.filter_date_range";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:15:"filterDateRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:103;s:6:"pretty";s:85:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateRange";}s:128:"lexik_form_filter.apply.orm.filter_datetime.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateTime";a:7:{s:5:"event";s:43:"lexik_form_filter.apply.orm.filter_datetime";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:14:"filterDateTime";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:117;s:6:"pretty";s:84:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateTime";}s:139:"lexik_form_filter.apply.orm.filter_datetime_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateTimeRange";a:7:{s:5:"event";s:49:"lexik_form_filter.apply.orm.filter_datetime_range";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:19:"filterDateTimeRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:135;s:6:"pretty";s:89:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDateTimeRange";}s:124:"lexik_form_filter.apply.orm.filter_entity.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterEntity";a:7:{s:5:"event";s:41:"lexik_form_filter.apply.orm.filter_entity";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:12:"filterEntity";s:4:"file";s:129:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber.php";s:4:"line";i:64;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterEntity";}s:124:"lexik_form_filter.apply.orm.filter_number.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterNumber";a:7:{s:5:"event";s:41:"lexik_form_filter.apply.orm.filter_number";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:12:"filterNumber";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:150;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterNumber";}s:135:"lexik_form_filter.apply.orm.filter_number_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterNumberRange";a:7:{s:5:"event";s:47:"lexik_form_filter.apply.orm.filter_number_range";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:17:"filterNumberRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:170;s:6:"pretty";s:87:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterNumberRange";}s:120:"lexik_form_filter.apply.orm.filter_text.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterText";a:7:{s:5:"event";s:39:"lexik_form_filter.apply.orm.filter_text";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterText";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:225;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterText";}s:113:"lexik_form_filter.apply.orm.text.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterText";a:7:{s:5:"event";s:32:"lexik_form_filter.apply.orm.text";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterText";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:225;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterText";}s:115:"lexik_form_filter.apply.orm.email.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:33:"lexik_form_filter.apply.orm.email";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:117:"lexik_form_filter.apply.orm.integer.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.orm.integer";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:115:"lexik_form_filter.apply.orm.money.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:33:"lexik_form_filter.apply.orm.money";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:116:"lexik_form_filter.apply.orm.number.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.orm.number";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:117:"lexik_form_filter.apply.orm.percent.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.orm.percent";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:116:"lexik_form_filter.apply.orm.search.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.orm.search";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:113:"lexik_form_filter.apply.orm.url.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:31:"lexik_form_filter.apply.orm.url";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:116:"lexik_form_filter.apply.orm.choice.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.orm.choice";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:117:"lexik_form_filter.apply.orm.entity.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterEntity";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.orm.entity";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:12:"filterEntity";s:4:"file";s:129:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber.php";s:4:"line";i:64;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterEntity";}s:117:"lexik_form_filter.apply.orm.country.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.orm.country";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:118:"lexik_form_filter.apply.orm.language.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.orm.language";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:116:"lexik_form_filter.apply.orm.locale.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.orm.locale";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:118:"lexik_form_filter.apply.orm.timezone.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.orm.timezone";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:113:"lexik_form_filter.apply.orm.date.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";a:7:{s:5:"event";s:32:"lexik_form_filter.apply.orm.date";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";}s:117:"lexik_form_filter.apply.orm.datetime.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.orm.datetime";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";}s:117:"lexik_form_filter.apply.orm.birthday.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.orm.birthday";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:80:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterDate";}s:118:"lexik_form_filter.apply.orm.checkbox.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.orm.checkbox";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:115:"lexik_form_filter.apply.orm.radio.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";a:7:{s:5:"event";s:33:"lexik_form_filter.apply.orm.radio";s:4:"type";s:6:"Method";s:5:"class";s:68:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber::filterValue";}s:128:"lexik_form_filter.apply.dbal.filter_boolean.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterBoolean";a:7:{s:5:"event";s:43:"lexik_form_filter.apply.dbal.filter_boolean";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:13:"filterBoolean";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:47;s:6:"pretty";s:84:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterBoolean";}s:130:"lexik_form_filter.apply.dbal.filter_checkbox.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterCheckbox";a:7:{s:5:"event";s:44:"lexik_form_filter.apply.dbal.filter_checkbox";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:14:"filterCheckbox";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:67;s:6:"pretty";s:85:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterCheckbox";}s:125:"lexik_form_filter.apply.dbal.filter_choice.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:42:"lexik_form_filter.apply.dbal.filter_choice";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:122:"lexik_form_filter.apply.dbal.filter_date.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";a:7:{s:5:"event";s:40:"lexik_form_filter.apply.dbal.filter_date";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";}s:133:"lexik_form_filter.apply.dbal.filter_date_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateRange";a:7:{s:5:"event";s:46:"lexik_form_filter.apply.dbal.filter_date_range";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:15:"filterDateRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:103;s:6:"pretty";s:86:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateRange";}s:130:"lexik_form_filter.apply.dbal.filter_datetime.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateTime";a:7:{s:5:"event";s:44:"lexik_form_filter.apply.dbal.filter_datetime";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:14:"filterDateTime";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:117;s:6:"pretty";s:85:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateTime";}s:141:"lexik_form_filter.apply.dbal.filter_datetime_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateTimeRange";a:7:{s:5:"event";s:50:"lexik_form_filter.apply.dbal.filter_datetime_range";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:19:"filterDateTimeRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:135;s:6:"pretty";s:90:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDateTimeRange";}s:126:"lexik_form_filter.apply.dbal.filter_number.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterNumber";a:7:{s:5:"event";s:42:"lexik_form_filter.apply.dbal.filter_number";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:12:"filterNumber";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:150;s:6:"pretty";s:83:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterNumber";}s:137:"lexik_form_filter.apply.dbal.filter_number_range.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterNumberRange";a:7:{s:5:"event";s:48:"lexik_form_filter.apply.dbal.filter_number_range";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:17:"filterNumberRange";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:170;s:6:"pretty";s:88:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterNumberRange";}s:122:"lexik_form_filter.apply.dbal.filter_text.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterText";a:7:{s:5:"event";s:40:"lexik_form_filter.apply.dbal.filter_text";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterText";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:225;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterText";}s:115:"lexik_form_filter.apply.dbal.text.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterText";a:7:{s:5:"event";s:33:"lexik_form_filter.apply.dbal.text";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterText";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:225;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterText";}s:117:"lexik_form_filter.apply.dbal.email.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.dbal.email";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:119:"lexik_form_filter.apply.dbal.integer.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.dbal.integer";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:117:"lexik_form_filter.apply.dbal.money.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.dbal.money";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:118:"lexik_form_filter.apply.dbal.number.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.dbal.number";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:119:"lexik_form_filter.apply.dbal.percent.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.dbal.percent";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:118:"lexik_form_filter.apply.dbal.search.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.dbal.search";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:115:"lexik_form_filter.apply.dbal.url.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:32:"lexik_form_filter.apply.dbal.url";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:118:"lexik_form_filter.apply.dbal.choice.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.dbal.choice";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:119:"lexik_form_filter.apply.dbal.country.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:36:"lexik_form_filter.apply.dbal.country";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:120:"lexik_form_filter.apply.dbal.language.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:37:"lexik_form_filter.apply.dbal.language";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:118:"lexik_form_filter.apply.dbal.locale.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:35:"lexik_form_filter.apply.dbal.locale";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:120:"lexik_form_filter.apply.dbal.timezone.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:37:"lexik_form_filter.apply.dbal.timezone";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:115:"lexik_form_filter.apply.dbal.date.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";a:7:{s:5:"event";s:33:"lexik_form_filter.apply.dbal.date";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";}s:119:"lexik_form_filter.apply.dbal.datetime.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";a:7:{s:5:"event";s:37:"lexik_form_filter.apply.dbal.datetime";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";}s:119:"lexik_form_filter.apply.dbal.birthday.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";a:7:{s:5:"event";s:37:"lexik_form_filter.apply.dbal.birthday";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:10:"filterDate";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:85;s:6:"pretty";s:81:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterDate";}s:120:"lexik_form_filter.apply.dbal.checkbox.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:37:"lexik_form_filter.apply.dbal.checkbox";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:117:"lexik_form_filter.apply.dbal.radio.Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";a:7:{s:5:"event";s:34:"lexik_form_filter.apply.dbal.radio";s:4:"type";s:6:"Method";s:5:"class";s:69:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber";s:6:"method";s:11:"filterValue";s:4:"file";s:134:"C:\xampp\htdocs\BecasMds\vendor\lexik\form-filter-bundle\Lexik\Bundle\FormFilterBundle\Event\Subscriber\AbstractDoctrineSubscriber.php";s:4:"line";i:22;s:6:"pretty";s:82:"Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineDBALSubscriber::filterValue";}s:96:"fos_user.security.implicit_login.FOS\UserBundle\EventListener\LastLoginListener::onImplicitLogin";a:7:{s:5:"event";s:32:"fos_user.security.implicit_login";s:4:"type";s:6:"Method";s:5:"class";s:46:"FOS\UserBundle\EventListener\LastLoginListener";s:6:"method";s:15:"onImplicitLogin";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\LastLoginListener.php";s:4:"line";i:39;s:6:"pretty";s:63:"FOS\UserBundle\EventListener\LastLoginListener::onImplicitLogin";}s:101:"security.interactive_login.FOS\UserBundle\EventListener\LastLoginListener::onSecurityInteractiveLogin";a:7:{s:5:"event";s:26:"security.interactive_login";s:4:"type";s:6:"Method";s:5:"class";s:46:"FOS\UserBundle\EventListener\LastLoginListener";s:6:"method";s:26:"onSecurityInteractiveLogin";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\LastLoginListener.php";s:4:"line";i:47;s:6:"pretty";s:74:"FOS\UserBundle\EventListener\LastLoginListener::onSecurityInteractiveLogin";}s:97:"fos_user.registration.completed.FOS\UserBundle\EventListener\AuthenticationListener::authenticate";a:7:{s:5:"event";s:31:"fos_user.registration.completed";s:4:"type";s:6:"Method";s:5:"class";s:51:"FOS\UserBundle\EventListener\AuthenticationListener";s:6:"method";s:12:"authenticate";s:4:"file";s:101:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\AuthenticationListener.php";s:4:"line";i:42;s:6:"pretty";s:65:"FOS\UserBundle\EventListener\AuthenticationListener::authenticate";}s:91:"fos_user.registration.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:31:"fos_user.registration.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:97:"fos_user.registration.confirmed.FOS\UserBundle\EventListener\AuthenticationListener::authenticate";a:7:{s:5:"event";s:31:"fos_user.registration.confirmed";s:4:"type";s:6:"Method";s:5:"class";s:51:"FOS\UserBundle\EventListener\AuthenticationListener";s:6:"method";s:12:"authenticate";s:4:"file";s:101:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\AuthenticationListener.php";s:4:"line";i:42;s:6:"pretty";s:65:"FOS\UserBundle\EventListener\AuthenticationListener::authenticate";}s:100:"fos_user.resetting.reset.completed.FOS\UserBundle\EventListener\AuthenticationListener::authenticate";a:7:{s:5:"event";s:34:"fos_user.resetting.reset.completed";s:4:"type";s:6:"Method";s:5:"class";s:51:"FOS\UserBundle\EventListener\AuthenticationListener";s:6:"method";s:12:"authenticate";s:4:"file";s:101:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\AuthenticationListener.php";s:4:"line";i:42;s:6:"pretty";s:65:"FOS\UserBundle\EventListener\AuthenticationListener::authenticate";}s:94:"fos_user.resetting.reset.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:34:"fos_user.resetting.reset.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:99:"fos_user.change_password.edit.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:39:"fos_user.change_password.edit.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:91:"fos_user.group.create.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:31:"fos_user.group.create.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:91:"fos_user.group.delete.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:31:"fos_user.group.delete.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:89:"fos_user.group.edit.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:29:"fos_user.group.edit.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:91:"fos_user.profile.edit.completed.FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";a:7:{s:5:"event";s:31:"fos_user.profile.edit.completed";s:4:"type";s:6:"Method";s:5:"class";s:42:"FOS\UserBundle\EventListener\FlashListener";s:6:"method";s:15:"addSuccessFlash";s:4:"file";s:92:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\FlashListener.php";s:4:"line";i:54;s:6:"pretty";s:59:"FOS\UserBundle\EventListener\FlashListener::addSuccessFlash";}s:110:"fos_user.resetting.reset.initialize.FOS\UserBundle\EventListener\ResettingListener::onResettingResetInitialize";a:7:{s:5:"event";s:35:"fos_user.resetting.reset.initialize";s:4:"type";s:6:"Method";s:5:"class";s:46:"FOS\UserBundle\EventListener\ResettingListener";s:6:"method";s:26:"onResettingResetInitialize";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\ResettingListener.php";s:4:"line";i:40;s:6:"pretty";s:74:"FOS\UserBundle\EventListener\ResettingListener::onResettingResetInitialize";}s:104:"fos_user.resetting.reset.success.FOS\UserBundle\EventListener\ResettingListener::onResettingResetSuccess";a:7:{s:5:"event";s:32:"fos_user.resetting.reset.success";s:4:"type";s:6:"Method";s:5:"class";s:46:"FOS\UserBundle\EventListener\ResettingListener";s:6:"method";s:23:"onResettingResetSuccess";s:4:"file";s:96:"C:\xampp\htdocs\BecasMds\vendor\friendsofsymfony\user-bundle\EventListener\ResettingListener.php";s:4:"line";i:47;s:6:"pretty";s:71:"FOS\UserBundle\EventListener\ResettingListener::onResettingResetSuccess";}}}}s:6:"logger";C:62:"Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector":13723:{a:3:{s:11:"error_count";i:1;s:4:"logs";a:47:{i:0;a:5:{s:9:"timestamp";i:1463390057;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:1;a:5:{s:9:"timestamp";i:1463390057;s:7:"message";s:124:"Notified event "kernel.request" to listener "Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:2;a:5:{s:9:"timestamp";i:1463390057;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:3;a:5:{s:9:"timestamp";i:1463390057;s:7:"message";s:121:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:4;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:127:"Notified event "kernel.exception" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelException".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:5;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:128:"Notified event "kernel.exception" to listener "Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:6;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:317:"Uncaught PHP Exception Symfony\Component\Filesystem\Exception\IOException: "Cannot rename "C:\xampp\htdocs\BecasMds\app\cache\dev\app9EC2.tmp" to "C:\xampp\htdocs\BecasMds\app\cache\dev/appDevUrlMatcher.php"." at C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Component\Filesystem\Filesystem.php line 264";s:8:"priority";i:500;s:12:"priorityName";s:8:"CRITICAL";s:7:"context";a:1:{s:9:"exception";s:58:"Object(Symfony\Component\Filesystem\Exception\IOException)";}}i:7;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:8;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:9;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:10;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:124:"Notified event "kernel.request" to listener "Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:11;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:12;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:13;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:14;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:121:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:15;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:16;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:121:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:17;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:18;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:104:"Notified event "kernel.request" to listener "Symfony\Component\Security\Http\Firewall::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:19;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:20;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:122:"Notified event "kernel.request" to listener "Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:21;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:22;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:124:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener::injectLogger".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:23;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:54:"Notified event "kernel.request" to listener "closure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:24;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:124:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener::injectLogger".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:25;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:134:"Notified event "kernel.controller" to listener "Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:26;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:133:"Notified event "kernel.controller" to listener "Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:27;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:137:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:28;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:141:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:29;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:135:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:30;a:5:{s:9:"timestamp";i:1463390059;s:7:"message";s:157:"Defining the getGlobals() method in the "assetic" extension without explicitly implementing Twig_Extension_GlobalsInterface is deprecated since version 1.23.";s:8:"priority";i:300;s:12:"priorityName";s:7:"WARNING";s:7:"context";a:2:{s:4:"type";i:-100;s:5:"stack";a:10:{i:0;a:3:{s:8:"function";s:6:"handle";s:5:"class";s:36:"Symfony\Component\Debug\ErrorHandler";s:4:"type";s:2:"->";}i:1;a:3:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:3413;s:8:"function";s:13:"trigger_error";}i:2;a:5:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:3374;s:8:"function";s:11:"initGlobals";s:5:"class";s:16:"Twig_Environment";s:4:"type";s:2:"->";}i:3;a:5:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:3380;s:8:"function";s:10:"getGlobals";s:5:"class";s:16:"Twig_Environment";s:4:"type";s:2:"->";}i:4;a:5:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:4629;s:8:"function";s:12:"mergeGlobals";s:5:"class";s:16:"Twig_Environment";s:4:"type";s:2:"->";}i:5;a:5:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:4636;s:8:"function";s:7:"display";s:5:"class";s:13:"Twig_Template";s:4:"type";s:2:"->";}i:6;a:5:{s:4:"file";s:50:"C:\xampp\htdocs\BecasMds\app\cache\dev\classes.php";s:4:"line";i:2944;s:8:"function";s:6:"render";s:5:"class";s:13:"Twig_Template";s:4:"type";s:2:"->";}i:7;a:5:{s:4:"file";s:112:"C:\xampp\htdocs\BecasMds\vendor\symfony\symfony\src\Symfony\Bundle\TwigBundle\Controller\ExceptionController.php";s:4:"line";i:63;s:8:"function";s:6:"render";s:5:"class";s:16:"Twig_Environment";s:4:"type";s:2:"->";}i:8;a:3:{s:8:"function";s:10:"showAction";s:5:"class";s:56:"Symfony\Bundle\TwigBundle\Controller\ExceptionController";s:4:"type";s:2:"->";}i:9;a:3:{s:4:"file";s:48:"C:\xampp\htdocs\BecasMds\app\bootstrap.php.cache";s:4:"line";i:2974;s:8:"function";s:20:"call_user_func_array";}}}}i:31;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:111:"Notified event "kernel.response" to listener "Symfony\Bridge\Monolog\Handler\FirePHPHandler::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:32;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:113:"Notified event "kernel.response" to listener "Symfony\Bridge\Monolog\Handler\ChromePhpHandler::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:33;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:34;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:35;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:128:"Notified event "kernel.response" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:36;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:37;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:136:"Notified event "kernel.response" to listener "Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:38;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:128:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:39;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:133:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:40;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:143:"Listener "Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException" stopped propagation of the event "kernel.exception".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:41;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:111:"Notified event "kernel.response" to listener "Symfony\Bridge\Monolog\Handler\FirePHPHandler::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:42;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:113:"Notified event "kernel.response" to listener "Symfony\Bridge\Monolog\Handler\ChromePhpHandler::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:43;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:44;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:45;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:128:"Notified event "kernel.response" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:46;a:5:{s:9:"timestamp";i:1463390060;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}}s:17:"deprecation_count";i:1;}}s:4:"time";C:60:"Symfony\Component\HttpKernel\DataCollector\TimeDataCollector":16615:{a:2:{s:10:"start_time";d:1463390056226.628173828125;s:6:"events";a:24:{s:11:"__section__";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:2:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}i:1;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2947;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2947;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:14:"kernel.request";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:22:"kernel.request.loading";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:2359296;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:22:"event_listener_loading";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:3:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:2359296;}i:1;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2047;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2047;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:7602176;}i:2;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:15;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:2359296;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:15;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:15;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:2359296;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:15;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:16:"kernel.exception";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2046;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:24:"kernel.exception.loading";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2046;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2046;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:7602176;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:22:"event_listener_loading";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:60:"Symfony\Component\HttpKernel\EventListener\ExceptionListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2047;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:17:"__section__.child";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2054;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:15:"kernel.response";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:23:"kernel.response.loading";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:22:"event_listener_loading";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:45:"Symfony\Bridge\Monolog\Handler\FirePHPHandler";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:47:"Symfony\Bridge\Monolog\Handler\ChromePhpHandler";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\ResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\Security\Http\RememberMe\ResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:62:"Sensio\Bundle\FrameworkExtraBundle\EventListener\CacheListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2916;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2916;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:70:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2931;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:62:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2931;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:67:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2931;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2931;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:16:"kernel.terminate";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2947;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2947;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:24:"kernel.terminate.loading";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2947;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2947;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:22:"event_listener_loading";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:66:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:2947;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:2947;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12058624;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1463390057621.89990234375;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}}}}s:6:"memory";C:62:"Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector":62:{a:2:{s:6:"memory";i:16515072;s:12:"memory_limit";i:268435456;}}s:6:"router";C:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector":51:{a:3:{s:8:"redirect";b:0;s:3:"url";N;s:5:"route";N;}}s:11:"swiftmailer";C:67:"Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector":77:{a:3:{s:6:"mailer";a:0:{}s:12:"messageCount";i:0;s:13:"defaultMailer";s:0:"";}}s:8:"security";C:65:"Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector":106:{a:5:{s:7:"enabled";b:1;s:13:"authenticated";b:0;s:11:"token_class";N;s:4:"user";s:0:"";s:5:"roles";a:0:{}}}s:2:"db";C:66:"Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector":612:{a:6:{s:7:"queries";a:1:{s:7:"default";a:0:{}}s:11:"connections";a:1:{s:7:"default";s:32:"doctrine.dbal.default_connection";}s:8:"managers";a:1:{s:7:"default";s:35:"doctrine.orm.default_entity_manager";}s:8:"entities";a:1:{s:7:"default";a:2:{s:25:"FOS\UserBundle\Model\User";s:25:"FOS\UserBundle\Model\User";s:34:"BecasMds\UsuarioBundle\Entity\User";s:34:"BecasMds\UsuarioBundle\Entity\User";}}s:6:"errors";a:0:{}s:6:"caches";a:4:{s:7:"enabled";b:0;s:11:"log_enabled";b:0;s:6:"counts";a:3:{s:4:"puts";i:0;s:4:"hits";i:0;s:6:"misses";i:0;}s:7:"regions";a:3:{s:4:"puts";a:0:{}s:4:"hits";a:0:{}s:6:"misses";a:0:{}}}}}}s:2:"ip";s:9:"127.0.0.1";s:6:"method";s:4:"POST";s:3:"url";s:76:"http://becasmds.chaco.gov.ar:86/app_dev.php/shtumi_dependent_filtered_entity";s:4:"time";i:1463390060;}